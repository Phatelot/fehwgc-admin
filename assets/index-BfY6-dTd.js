var vr=Object.defineProperty;var yr=(e,t,r)=>t in e?vr(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r;var F=(e,t,r)=>yr(e,typeof t!="symbol"?t+"":t,r);(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const n of document.querySelectorAll('link[rel="modulepreload"]'))o(n);new MutationObserver(n=>{for(const i of n)if(i.type==="childList")for(const a of i.addedNodes)a.tagName==="LINK"&&a.rel==="modulepreload"&&o(a)}).observe(document,{childList:!0,subtree:!0});function r(n){const i={};return n.integrity&&(i.integrity=n.integrity),n.referrerPolicy&&(i.referrerPolicy=n.referrerPolicy),n.crossOrigin==="use-credentials"?i.credentials="include":n.crossOrigin==="anonymous"?i.credentials="omit":i.credentials="same-origin",i}function o(n){if(n.ep)return;n.ep=!0;const i=r(n);fetch(n.href,i)}})();function q(){}function kr(e){return!!e&&(typeof e=="object"||typeof e=="function")&&typeof e.then=="function"}function jt(e){return e()}function mt(){return Object.create(null)}function J(e){e.forEach(jt)}function qt(e){return typeof e=="function"}function Le(e,t){return e!=e?t==t:e!==t||e&&typeof e=="object"||typeof e=="function"}function Sr(e){return Object.keys(e).length===0}function C(e,t){e.appendChild(t)}function j(e,t,r){e.insertBefore(t,r||null)}function I(e){e.parentNode&&e.parentNode.removeChild(e)}function Ae(e,t){for(let r=0;r<e.length;r+=1)e[r]&&e[r].d(t)}function L(e){return document.createElement(e)}function M(e){return document.createTextNode(e)}function H(){return M(" ")}function W(e,t,r,o){return e.addEventListener(t,r,o),()=>e.removeEventListener(t,r,o)}function z(e,t,r){r==null?e.removeAttribute(t):e.getAttribute(t)!==r&&e.setAttribute(t,r)}function $t(e){return e===""?null:+e}function Pr(e){return Array.from(e.childNodes)}function Wt(e,t){t=""+t,e.data!==t&&(e.data=t)}function N(e,t){e.value=t??""}function le(e,t,r,o){r==null?e.style.removeProperty(t):e.style.setProperty(t,r,"")}function he(e,t,r){for(let o=0;o<e.options.length;o+=1){const n=e.options[o];if(n.__value===t){n.selected=!0;return}}(!r||t!==void 0)&&(e.selectedIndex=-1)}function ft(e){const t=e.querySelector(":checked");return t&&t.__value}function Gr(e,t,{bubbles:r=!1,cancelable:o=!1}={}){return new CustomEvent(e,{detail:t,bubbles:r,cancelable:o})}let pe;function B(e){pe=e}function xt(){if(!pe)throw new Error("Function called outside component initialization");return pe}function Or(){const e=xt();return(t,r,{cancelable:o=!1}={})=>{const n=e.$$.callbacks[t];if(n){const i=Gr(t,r,{cancelable:o});return n.slice().forEach(a=>{a.call(e,i)}),!i.defaultPrevented}return!0}}const ee=[],_t=[];let oe=[];const Et=[],Rr=Promise.resolve();let Fe=!1;function Ar(){Fe||(Fe=!0,Rr.then(Ie))}function de(e){oe.push(e)}const ke=new Set;let X=0;function Ie(){if(X!==0)return;const e=pe;do{try{for(;X<ee.length;){const t=ee[X];X++,B(t),Fr(t.$$)}}catch(t){throw ee.length=0,X=0,t}for(B(null),ee.length=0,X=0;_t.length;)_t.pop()();for(let t=0;t<oe.length;t+=1){const r=oe[t];ke.has(r)||(ke.add(r),r())}oe.length=0}while(ee.length);for(;Et.length;)Et.pop()();Fe=!1,ke.clear(),B(e)}function Fr(e){if(e.fragment!==null){e.update(),J(e.before_update);const t=e.dirty;e.dirty=[-1],e.fragment&&e.fragment.p(e.ctx,t),e.after_update.forEach(de)}}function Cr(e){const t=[],r=[];oe.forEach(o=>e.indexOf(o)===-1?t.push(o):r.push(o)),r.forEach(o=>o()),oe=t}const fe=new Set;let K;function Bt(){K={r:0,c:[],p:K}}function Ht(){K.r||J(K.c),K=K.p}function V(e,t){e&&e.i&&(fe.delete(e),e.i(t))}function ne(e,t,r,o){if(e&&e.o){if(fe.has(e))return;fe.add(e),K.c.push(()=>{fe.delete(e),o&&(r&&e.d(1),o())}),e.o(t)}else o&&o()}function Ur(e,t){const r=t.token={};function o(n,i,a,p){if(t.token!==r)return;t.resolved=p;let m=t.ctx;a!==void 0&&(m=m.slice(),m[a]=p);const f=n&&(t.current=n)(m);let b=!1;t.block&&(t.blocks?t.blocks.forEach((w,y)=>{y!==i&&w&&(Bt(),ne(w,1,1,()=>{t.blocks[y]===w&&(t.blocks[y]=null)}),Ht())}):t.block.d(1),f.c(),V(f,1),f.m(t.mount(),t.anchor),b=!0),t.block=f,t.blocks&&(t.blocks[i]=f),b&&Ie()}if(kr(e)){const n=xt();if(e.then(i=>{B(n),o(t.then,1,t.value,i),B(null)},i=>{if(B(n),o(t.catch,2,t.error,i),B(null),!t.hasCatch)throw i}),t.current!==t.pending)return o(t.pending,0),!0}else{if(t.current!==t.then)return o(t.then,1,t.value,e),!0;t.resolved=e}}function Dr(e,t,r){const o=t.slice(),{resolved:n}=e;e.current===e.then&&(o[e.value]=n),e.current===e.catch&&(o[e.error]=n),e.block.p(o,r)}function te(e){return(e==null?void 0:e.length)!==void 0?e:Array.from(e)}function Nt(e){e&&e.c()}function je(e,t,r){const{fragment:o,after_update:n}=e.$$;o&&o.m(t,r),de(()=>{const i=e.$$.on_mount.map(jt).filter(qt);e.$$.on_destroy?e.$$.on_destroy.push(...i):J(i),e.$$.on_mount=[]}),n.forEach(de)}function qe(e,t){const r=e.$$;r.fragment!==null&&(Cr(r.after_update),J(r.on_destroy),r.fragment&&r.fragment.d(t),r.on_destroy=r.fragment=null,r.ctx=[])}function Lr(e,t){e.$$.dirty[0]===-1&&(ee.push(e),Ar(),e.$$.dirty.fill(0)),e.$$.dirty[t/31|0]|=1<<t%31}function $e(e,t,r,o,n,i,a=null,p=[-1]){const m=pe;B(e);const f=e.$$={fragment:null,ctx:[],props:i,update:q,not_equal:n,bound:mt(),on_mount:[],on_destroy:[],on_disconnect:[],before_update:[],after_update:[],context:new Map(t.context||(m?m.$$.context:[])),callbacks:mt(),dirty:p,skip_bound:!1,root:t.target||m.$$.root};a&&a(f.root);let b=!1;if(f.ctx=r?r(e,t.props||{},(w,y,...P)=>{const R=P.length?P[0]:y;return f.ctx&&n(f.ctx[w],f.ctx[w]=R)&&(!f.skip_bound&&f.bound[w]&&f.bound[w](R),b&&Lr(e,w)),y}):[],f.update(),b=!0,J(f.before_update),f.fragment=o?o(f.ctx):!1,t.target){if(t.hydrate){const w=Pr(t.target);f.fragment&&f.fragment.l(w),w.forEach(I)}else f.fragment&&f.fragment.c();t.intro&&V(e.$$.fragment),je(e,t.target,t.anchor),Ie()}B(m)}class We{constructor(){F(this,"$$");F(this,"$$set")}$destroy(){qe(this,1),this.$destroy=q}$on(t,r){if(!qt(r))return q;const o=this.$$.callbacks[t]||(this.$$.callbacks[t]=[]);return o.push(r),()=>{const n=o.indexOf(r);n!==-1&&o.splice(n,1)}}$set(t){this.$$set&&!Sr(t)&&(this.$$.skip_bound=!0,this.$$set(t),this.$$.skip_bound=!1)}}const Ir="4";typeof window<"u"&&(window.__svelte||(window.__svelte={v:new Set})).v.add(Ir);function _e(){return typeof navigator=="object"&&"userAgent"in navigator?navigator.userAgent:typeof process=="object"&&process.version!==void 0?`Node.js/${process.version.substr(1)} (${process.platform}; ${process.arch})`:"<environment undetectable>"}function xe(e,t,r,o){if(typeof r!="function")throw new Error("method for before hook must be a function");return o||(o={}),Array.isArray(t)?t.reverse().reduce((n,i)=>xe.bind(null,e,i,n,o),r)():Promise.resolve().then(()=>e.registry[t]?e.registry[t].reduce((n,i)=>i.hook.bind(null,n,o),r)():r(o))}function jr(e,t,r,o){const n=o;e.registry[r]||(e.registry[r]=[]),t==="before"&&(o=(i,a)=>Promise.resolve().then(n.bind(null,a)).then(i.bind(null,a))),t==="after"&&(o=(i,a)=>{let p;return Promise.resolve().then(i.bind(null,a)).then(m=>(p=m,n(p,a))).then(()=>p)}),t==="error"&&(o=(i,a)=>Promise.resolve().then(i.bind(null,a)).catch(p=>n(p,a))),e.registry[r].push({hook:o,orig:n})}function qr(e,t,r){if(!e.registry[t])return;const o=e.registry[t].map(n=>n.orig).indexOf(r);o!==-1&&e.registry[t].splice(o,1)}const Tt=Function.bind,bt=Tt.bind(Tt);function Vt(e,t,r){const o=bt(qr,null).apply(null,r?[t,r]:[t]);e.api={remove:o},e.remove=o,["before","error","after","wrap"].forEach(n=>{const i=r?[t,n,r]:[t,n];e[n]=e.api[n]=bt(jr,null).apply(null,i)})}function $r(){const e=Symbol("Singular"),t={registry:{}},r=xe.bind(null,t,e);return Vt(r,t,e),r}function Wr(){const e={registry:{}},t=xe.bind(null,e);return Vt(t,e),t}const xr={Singular:$r,Collection:Wr};var Br="0.0.0-development",Hr=`octokit-endpoint.js/${Br} ${_e()}`,Nr={method:"GET",baseUrl:"https://api.github.com",headers:{accept:"application/vnd.github.v3+json","user-agent":Hr},mediaType:{format:""}};function Vr(e){return e?Object.keys(e).reduce((t,r)=>(t[r.toLowerCase()]=e[r],t),{}):{}}function Mr(e){if(typeof e!="object"||e===null||Object.prototype.toString.call(e)!=="[object Object]")return!1;const t=Object.getPrototypeOf(e);if(t===null)return!0;const r=Object.prototype.hasOwnProperty.call(t,"constructor")&&t.constructor;return typeof r=="function"&&r instanceof r&&Function.prototype.call(r)===Function.prototype.call(e)}function Mt(e,t){const r=Object.assign({},e);return Object.keys(t).forEach(o=>{Mr(t[o])?o in e?r[o]=Mt(e[o],t[o]):Object.assign(r,{[o]:t[o]}):Object.assign(r,{[o]:t[o]})}),r}function wt(e){for(const t in e)e[t]===void 0&&delete e[t];return e}function Ce(e,t,r){var n;if(typeof t=="string"){let[i,a]=t.split(" ");r=Object.assign(a?{method:i,url:a}:{url:i},r)}else r=Object.assign({},t);r.headers=Vr(r.headers),wt(r),wt(r.headers);const o=Mt(e||{},r);return r.url==="/graphql"&&(e&&((n=e.mediaType.previews)!=null&&n.length)&&(o.mediaType.previews=e.mediaType.previews.filter(i=>!o.mediaType.previews.includes(i)).concat(o.mediaType.previews)),o.mediaType.previews=(o.mediaType.previews||[]).map(i=>i.replace(/-preview/,""))),o}function zr(e,t){const r=/\?/.test(e)?"&":"?",o=Object.keys(t);return o.length===0?e:e+r+o.map(n=>n==="q"?"q="+t.q.split("+").map(encodeURIComponent).join("+"):`${n}=${encodeURIComponent(t[n])}`).join("&")}var Kr=/\{[^}]+\}/g;function Qr(e){return e.replace(/^\W+|\W+$/g,"").split(/,/)}function Jr(e){const t=e.match(Kr);return t?t.map(Qr).reduce((r,o)=>r.concat(o),[]):[]}function vt(e,t){const r={__proto__:null};for(const o of Object.keys(e))t.indexOf(o)===-1&&(r[o]=e[o]);return r}function zt(e){return e.split(/(%[0-9A-Fa-f]{2})/g).map(function(t){return/%[0-9A-Fa-f]/.test(t)||(t=encodeURI(t).replace(/%5B/g,"[").replace(/%5D/g,"]")),t}).join("")}function re(e){return encodeURIComponent(e).replace(/[!'()*]/g,function(t){return"%"+t.charCodeAt(0).toString(16).toUpperCase()})}function ae(e,t,r){return t=e==="+"||e==="#"?zt(t):re(t),r?re(r)+"="+t:t}function Z(e){return e!=null}function Se(e){return e===";"||e==="&"||e==="?"}function Yr(e,t,r,o){var n=e[r],i=[];if(Z(n)&&n!=="")if(typeof n=="string"||typeof n=="number"||typeof n=="boolean")n=n.toString(),o&&o!=="*"&&(n=n.substring(0,parseInt(o,10))),i.push(ae(t,n,Se(t)?r:""));else if(o==="*")Array.isArray(n)?n.filter(Z).forEach(function(a){i.push(ae(t,a,Se(t)?r:""))}):Object.keys(n).forEach(function(a){Z(n[a])&&i.push(ae(t,n[a],a))});else{const a=[];Array.isArray(n)?n.filter(Z).forEach(function(p){a.push(ae(t,p))}):Object.keys(n).forEach(function(p){Z(n[p])&&(a.push(re(p)),a.push(ae(t,n[p].toString())))}),Se(t)?i.push(re(r)+"="+a.join(",")):a.length!==0&&i.push(a.join(","))}else t===";"?Z(n)&&i.push(re(r)):n===""&&(t==="&"||t==="?")?i.push(re(r)+"="):n===""&&i.push("");return i}function Xr(e){return{expand:Zr.bind(null,e)}}function Zr(e,t){var r=["+","#",".","/",";","?","&"];return e=e.replace(/\{([^\{\}]+)\}|([^\{\}]+)/g,function(o,n,i){if(n){let p="";const m=[];if(r.indexOf(n.charAt(0))!==-1&&(p=n.charAt(0),n=n.substr(1)),n.split(/,/g).forEach(function(f){var b=/([^:\*]*)(?::(\d+)|(\*))?/.exec(f);m.push(Yr(t,p,b[1],b[2]||b[3]))}),p&&p!=="+"){var a=",";return p==="?"?a="&":p!=="#"&&(a=p),(m.length!==0?p:"")+m.join(a)}else return m.join(",")}else return zt(i)}),e==="/"?e:e.replace(/\/$/,"")}function Kt(e){var b;let t=e.method.toUpperCase(),r=(e.url||"/").replace(/:([a-z]\w+)/g,"{$1}"),o=Object.assign({},e.headers),n,i=vt(e,["method","baseUrl","url","headers","request","mediaType"]);const a=Jr(r);r=Xr(r).expand(i),/^http/.test(r)||(r=e.baseUrl+r);const p=Object.keys(e).filter(w=>a.includes(w)).concat("baseUrl"),m=vt(i,p);if(!/application\/octet-stream/i.test(o.accept)&&(e.mediaType.format&&(o.accept=o.accept.split(/,/).map(w=>w.replace(/application\/vnd(\.\w+)(\.v3)?(\.\w+)?(\+json)?$/,`application/vnd$1$2.${e.mediaType.format}`)).join(",")),r.endsWith("/graphql")&&(b=e.mediaType.previews)!=null&&b.length)){const w=o.accept.match(/[\w-]+(?=-preview)/g)||[];o.accept=w.concat(e.mediaType.previews).map(y=>{const P=e.mediaType.format?`.${e.mediaType.format}`:"+json";return`application/vnd.github.${y}-preview${P}`}).join(",")}return["GET","HEAD"].includes(t)?r=zr(r,m):"data"in m?n=m.data:Object.keys(m).length&&(n=m),!o["content-type"]&&typeof n<"u"&&(o["content-type"]="application/json; charset=utf-8"),["PATCH","PUT"].includes(t)&&typeof n>"u"&&(n=""),Object.assign({method:t,url:r,headers:o},typeof n<"u"?{body:n}:null,e.request?{request:e.request}:null)}function es(e,t,r){return Kt(Ce(e,t,r))}function Qt(e,t){const r=Ce(e,t),o=es.bind(null,r);return Object.assign(o,{DEFAULTS:r,defaults:Qt.bind(null,r),merge:Ce.bind(null,r),parse:Kt})}var ts=Qt(null,Nr);class ce extends Error{constructor(r,o,n){super(r);F(this,"name");F(this,"status");F(this,"request");F(this,"response");this.name="HttpError",this.status=Number.parseInt(o),Number.isNaN(this.status)&&(this.status=0),"response"in n&&(this.response=n.response);const i=Object.assign({},n.request);n.request.headers.authorization&&(i.headers=Object.assign({},n.request.headers,{authorization:n.request.headers.authorization.replace(/ .*$/," [REDACTED]")})),i.url=i.url.replace(/\bclient_secret=\w+/g,"client_secret=[REDACTED]").replace(/\baccess_token=\w+/g,"access_token=[REDACTED]"),this.request=i}}var rs="0.0.0-development",ss={headers:{"user-agent":`octokit-request.js/${rs} ${_e()}`}};function os(e){if(typeof e!="object"||e===null||Object.prototype.toString.call(e)!=="[object Object]")return!1;const t=Object.getPrototypeOf(e);if(t===null)return!0;const r=Object.prototype.hasOwnProperty.call(t,"constructor")&&t.constructor;return typeof r=="function"&&r instanceof r&&Function.prototype.call(r)===Function.prototype.call(e)}async function yt(e){var w,y,P,R,k;const t=((w=e.request)==null?void 0:w.fetch)||globalThis.fetch;if(!t)throw new Error("fetch is not set. Please pass a fetch implementation as new Octokit({ request: { fetch }}). Learn more at https://github.com/octokit/octokit.js/#fetch-missing");const r=((y=e.request)==null?void 0:y.log)||console,o=((P=e.request)==null?void 0:P.parseSuccessResponseBody)!==!1,n=os(e.body)||Array.isArray(e.body)?JSON.stringify(e.body):e.body,i=Object.fromEntries(Object.entries(e.headers).map(([h,_])=>[h,String(_)]));let a;try{a=await t(e.url,{method:e.method,body:n,redirect:(R=e.request)==null?void 0:R.redirect,headers:i,signal:(k=e.request)==null?void 0:k.signal,...e.body&&{duplex:"half"}})}catch(h){let _="Unknown Error";if(h instanceof Error){if(h.name==="AbortError")throw h.status=500,h;_=h.message,h.name==="TypeError"&&"cause"in h&&(h.cause instanceof Error?_=h.cause.message:typeof h.cause=="string"&&(_=h.cause))}const v=new ce(_,500,{request:e});throw v.cause=h,v}const p=a.status,m=a.url,f={};for(const[h,_]of a.headers)f[h]=_;const b={url:m,status:p,headers:f,data:""};if("deprecation"in f){const h=f.link&&f.link.match(/<([^>]+)>; rel="deprecation"/),_=h&&h.pop();r.warn(`[@octokit/request] "${e.method} ${e.url}" is deprecated. It is scheduled to be removed on ${f.sunset}${_?`. See ${_}`:""}`)}if(p===204||p===205)return b;if(e.method==="HEAD"){if(p<400)return b;throw new ce(a.statusText,p,{response:b,request:e})}if(p===304)throw b.data=await Pe(a),new ce("Not modified",p,{response:b,request:e});if(p>=400)throw b.data=await Pe(a),new ce(ns(b.data),p,{response:b,request:e});return b.data=o?await Pe(a):a.body,b}async function Pe(e){const t=e.headers.get("content-type");return/application\/json/.test(t)?e.json().catch(()=>e.text()).catch(()=>""):!t||/^text\/|charset=utf-8$/.test(t)?e.text():e.arrayBuffer()}function ns(e){if(typeof e=="string")return e;if(e instanceof ArrayBuffer)return"Unknown error";if("message"in e){const t="documentation_url"in e?` - ${e.documentation_url}`:"";return Array.isArray(e.errors)?`${e.message}: ${e.errors.map(r=>JSON.stringify(r)).join(", ")}${t}`:`${e.message}${t}`}return`Unknown error: ${JSON.stringify(e)}`}function Ue(e,t){const r=e.defaults(t);return Object.assign(function(n,i){const a=r.merge(n,i);if(!a.request||!a.request.hook)return yt(r.parse(a));const p=(m,f)=>yt(r.parse(r.merge(m,f)));return Object.assign(p,{endpoint:r,defaults:Ue.bind(null,r)}),a.request.hook(p,a)},{endpoint:r,defaults:Ue.bind(null,r)})}var De=Ue(ts,ss),is="0.0.0-development";function as(e){return`Request failed due to following response errors:
`+e.errors.map(t=>` - ${t.message}`).join(`
`)}var cs=class extends Error{constructor(t,r,o){super(as(o));F(this,"name","GraphqlResponseError");F(this,"errors");F(this,"data");this.request=t,this.headers=r,this.response=o,this.errors=o.errors,this.data=o.data,Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor)}},ls=["method","baseUrl","url","headers","request","query","mediaType"],us=["query","method","url"],kt=/\/api\/v3\/?$/;function ps(e,t,r){if(r){if(typeof t=="string"&&"query"in r)return Promise.reject(new Error('[@octokit/graphql] "query" cannot be used as variable name'));for(const a in r)if(us.includes(a))return Promise.reject(new Error(`[@octokit/graphql] "${a}" cannot be used as variable name`))}const o=typeof t=="string"?Object.assign({query:t},r):t,n=Object.keys(o).reduce((a,p)=>ls.includes(p)?(a[p]=o[p],a):(a.variables||(a.variables={}),a.variables[p]=o[p],a),{}),i=o.baseUrl||e.endpoint.DEFAULTS.baseUrl;return kt.test(i)&&(n.url=i.replace(kt,"/api/graphql")),e(n).then(a=>{if(a.data.errors){const p={};for(const m of Object.keys(a.headers))p[m]=a.headers[m];throw new cs(n,p,a.data)}return a.data.data})}function Be(e,t){const r=e.defaults(t);return Object.assign((n,i)=>ps(r,n,i),{defaults:Be.bind(null,r),endpoint:r.endpoint})}Be(De,{headers:{"user-agent":`octokit-graphql.js/${is} ${_e()}`},method:"POST",url:"/graphql"});function ds(e){return Be(e,{method:"POST",url:"/graphql"})}var gs=/^v1\./,hs=/^ghs_/,ms=/^ghu_/;async function fs(e){const t=e.split(/\./).length===3,r=gs.test(e)||hs.test(e),o=ms.test(e);return{type:"token",token:e,tokenType:t?"app":r?"installation":o?"user-to-server":"oauth"}}function _s(e){return e.split(/\./).length===3?`bearer ${e}`:`token ${e}`}async function Es(e,t,r,o){const n=t.endpoint.merge(r,o);return n.headers.authorization=_s(e),t(n)}var Ts=function(t){if(!t)throw new Error("[@octokit/auth-token] No token passed to createTokenAuth");if(typeof t!="string")throw new Error("[@octokit/auth-token] Token passed to createTokenAuth is not a string");return t=t.replace(/^(token|bearer) +/i,""),Object.assign(fs.bind(null,t),{hook:Es.bind(null,t)})};const Jt="6.1.2",St=()=>{},bs=console.warn.bind(console),ws=console.error.bind(console),Pt=`octokit-core.js/${Jt} ${_e()}`;var me;let vs=(me=class{constructor(t={}){F(this,"request");F(this,"graphql");F(this,"log");F(this,"hook");F(this,"auth");const r=new xr.Collection,o={baseUrl:De.endpoint.DEFAULTS.baseUrl,headers:{},request:Object.assign({},t.request,{hook:r.bind(null,"request")}),mediaType:{previews:[],format:""}};if(o.headers["user-agent"]=t.userAgent?`${t.userAgent} ${Pt}`:Pt,t.baseUrl&&(o.baseUrl=t.baseUrl),t.previews&&(o.mediaType.previews=t.previews),t.timeZone&&(o.headers["time-zone"]=t.timeZone),this.request=De.defaults(o),this.graphql=ds(this.request).defaults(o),this.log=Object.assign({debug:St,info:St,warn:bs,error:ws},t.log),this.hook=r,t.authStrategy){const{authStrategy:i,...a}=t,p=i(Object.assign({request:this.request,log:this.log,octokit:this,octokitOptions:a},t.auth));r.wrap("request",p.hook),this.auth=p}else if(!t.auth)this.auth=async()=>({type:"unauthenticated"});else{const i=Ts(t.auth);r.wrap("request",i.hook),this.auth=i}const n=this.constructor;for(let i=0;i<n.plugins.length;++i)Object.assign(this,n.plugins[i](this,t))}static defaults(t){return class extends this{constructor(...o){const n=o[0]||{};if(typeof t=="function"){super(t(n));return}super(Object.assign({},t,n,n.userAgent&&t.userAgent?{userAgent:`${n.userAgent} ${t.userAgent}`}:null))}}}static plugin(...t){var n;const r=this.plugins;return n=class extends this{},F(n,"plugins",r.concat(t.filter(i=>!r.includes(i)))),n}},F(me,"VERSION",Jt),F(me,"plugins",[]),me);var ys="0.0.0-development";function ks(e){if(!e.data)return{...e,data:[]};if(!("total_count"in e.data&&!("url"in e.data)))return e;const r=e.data.incomplete_results,o=e.data.repository_selection,n=e.data.total_count;delete e.data.incomplete_results,delete e.data.repository_selection,delete e.data.total_count;const i=Object.keys(e.data)[0],a=e.data[i];return e.data=a,typeof r<"u"&&(e.data.incomplete_results=r),typeof o<"u"&&(e.data.repository_selection=o),e.data.total_count=n,e}function He(e,t,r){const o=typeof t=="function"?t.endpoint(r):e.request.endpoint(t,r),n=typeof t=="function"?t:e.request,i=o.method,a=o.headers;let p=o.url;return{[Symbol.asyncIterator]:()=>({async next(){if(!p)return{done:!0};try{const m=await n({method:i,url:p,headers:a}),f=ks(m);return p=((f.headers.link||"").match(/<([^>]+)>;\s*rel="next"/)||[])[1],{value:f}}catch(m){if(m.status!==409)throw m;return p="",{value:{status:200,headers:{},data:[]}}}}})}}function Yt(e,t,r,o){return typeof r=="function"&&(o=r,r=void 0),Xt(e,[],He(e,t,r)[Symbol.asyncIterator](),o)}function Xt(e,t,r,o){return r.next().then(n=>{if(n.done)return t;let i=!1;function a(){i=!0}return t=t.concat(o?o(n.value,a):n.value.data),i?t:Xt(e,t,r,o)})}Object.assign(Yt,{iterator:He});function Zt(e){return{paginate:Object.assign(Yt.bind(null,e),{iterator:He.bind(null,e)})}}Zt.VERSION=ys;var Ss=(e,t)=>`The cursor at "${e.join(",")}" did not change its value "${t}" after a page transition. Please make sure your that your query is set up correctly.`,Ps=class extends Error{constructor(t,r){super(Ss(t.pathInQuery,r));F(this,"name","MissingCursorChangeError");this.pageInfo=t,this.cursorValue=r,Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor)}},Gs=class extends Error{constructor(t){super(`No pageInfo property found in response. Please make sure to specify the pageInfo in your query. Response-Data: ${JSON.stringify(t,null,2)}`);F(this,"name","MissingPageInfo");this.response=t,Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor)}},Os=e=>Object.prototype.toString.call(e)==="[object Object]";function er(e){const t=tr(e,"pageInfo");if(t.length===0)throw new Gs(e);return t}var tr=(e,t,r=[])=>{for(const o of Object.keys(e)){const n=[...r,o],i=e[o];if(Os(i)){if(i.hasOwnProperty(t))return n;const a=tr(i,t,n);if(a.length>0)return a}}return[]},ue=(e,t)=>t.reduce((r,o)=>r[o],e),Ge=(e,t,r)=>{const o=t[t.length-1],n=[...t].slice(0,-1),i=ue(e,n);typeof r=="function"?i[o]=r(i[o]):i[o]=r},Rs=e=>{const t=er(e);return{pathInQuery:t,pageInfo:ue(e,[...t,"pageInfo"])}},rr=e=>e.hasOwnProperty("hasNextPage"),As=e=>rr(e)?e.endCursor:e.startCursor,Fs=e=>rr(e)?e.hasNextPage:e.hasPreviousPage,sr=e=>(t,r={})=>{let o=!0,n={...r};return{[Symbol.asyncIterator]:()=>({async next(){if(!o)return{done:!0,value:{}};const i=await e.graphql(t,n),a=Rs(i),p=As(a.pageInfo);if(o=Fs(a.pageInfo),o&&p===n.cursor)throw new Ps(a,p);return n={...n,cursor:p},{done:!1,value:i}}})}},Cs=(e,t)=>{if(Object.keys(e).length===0)return Object.assign(e,t);const r=er(e),o=[...r,"nodes"],n=ue(t,o);n&&Ge(e,o,m=>[...m,...n]);const i=[...r,"edges"],a=ue(t,i);a&&Ge(e,i,m=>[...m,...a]);const p=[...r,"pageInfo"];return Ge(e,p,ue(t,p)),e},Us=e=>{const t=sr(e);return async(r,o={})=>{let n={};for await(const i of t(r,o))n=Cs(n,i);return n}};function Ds(e){return{graphql:Object.assign(e.graphql,{paginate:Object.assign(Us(e),{iterator:sr(e)})})}}const Ls="13.2.6",Is={actions:{addCustomLabelsToSelfHostedRunnerForOrg:["POST /orgs/{org}/actions/runners/{runner_id}/labels"],addCustomLabelsToSelfHostedRunnerForRepo:["POST /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],addSelectedRepoToOrgSecret:["PUT /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}"],addSelectedRepoToOrgVariable:["PUT /orgs/{org}/actions/variables/{name}/repositories/{repository_id}"],approveWorkflowRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/approve"],cancelWorkflowRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/cancel"],createEnvironmentVariable:["POST /repos/{owner}/{repo}/environments/{environment_name}/variables"],createOrUpdateEnvironmentSecret:["PUT /repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}"],createOrUpdateOrgSecret:["PUT /orgs/{org}/actions/secrets/{secret_name}"],createOrUpdateRepoSecret:["PUT /repos/{owner}/{repo}/actions/secrets/{secret_name}"],createOrgVariable:["POST /orgs/{org}/actions/variables"],createRegistrationTokenForOrg:["POST /orgs/{org}/actions/runners/registration-token"],createRegistrationTokenForRepo:["POST /repos/{owner}/{repo}/actions/runners/registration-token"],createRemoveTokenForOrg:["POST /orgs/{org}/actions/runners/remove-token"],createRemoveTokenForRepo:["POST /repos/{owner}/{repo}/actions/runners/remove-token"],createRepoVariable:["POST /repos/{owner}/{repo}/actions/variables"],createWorkflowDispatch:["POST /repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches"],deleteActionsCacheById:["DELETE /repos/{owner}/{repo}/actions/caches/{cache_id}"],deleteActionsCacheByKey:["DELETE /repos/{owner}/{repo}/actions/caches{?key,ref}"],deleteArtifact:["DELETE /repos/{owner}/{repo}/actions/artifacts/{artifact_id}"],deleteEnvironmentSecret:["DELETE /repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}"],deleteEnvironmentVariable:["DELETE /repos/{owner}/{repo}/environments/{environment_name}/variables/{name}"],deleteOrgSecret:["DELETE /orgs/{org}/actions/secrets/{secret_name}"],deleteOrgVariable:["DELETE /orgs/{org}/actions/variables/{name}"],deleteRepoSecret:["DELETE /repos/{owner}/{repo}/actions/secrets/{secret_name}"],deleteRepoVariable:["DELETE /repos/{owner}/{repo}/actions/variables/{name}"],deleteSelfHostedRunnerFromOrg:["DELETE /orgs/{org}/actions/runners/{runner_id}"],deleteSelfHostedRunnerFromRepo:["DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}"],deleteWorkflowRun:["DELETE /repos/{owner}/{repo}/actions/runs/{run_id}"],deleteWorkflowRunLogs:["DELETE /repos/{owner}/{repo}/actions/runs/{run_id}/logs"],disableSelectedRepositoryGithubActionsOrganization:["DELETE /orgs/{org}/actions/permissions/repositories/{repository_id}"],disableWorkflow:["PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable"],downloadArtifact:["GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}"],downloadJobLogsForWorkflowRun:["GET /repos/{owner}/{repo}/actions/jobs/{job_id}/logs"],downloadWorkflowRunAttemptLogs:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/logs"],downloadWorkflowRunLogs:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/logs"],enableSelectedRepositoryGithubActionsOrganization:["PUT /orgs/{org}/actions/permissions/repositories/{repository_id}"],enableWorkflow:["PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable"],forceCancelWorkflowRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/force-cancel"],generateRunnerJitconfigForOrg:["POST /orgs/{org}/actions/runners/generate-jitconfig"],generateRunnerJitconfigForRepo:["POST /repos/{owner}/{repo}/actions/runners/generate-jitconfig"],getActionsCacheList:["GET /repos/{owner}/{repo}/actions/caches"],getActionsCacheUsage:["GET /repos/{owner}/{repo}/actions/cache/usage"],getActionsCacheUsageByRepoForOrg:["GET /orgs/{org}/actions/cache/usage-by-repository"],getActionsCacheUsageForOrg:["GET /orgs/{org}/actions/cache/usage"],getAllowedActionsOrganization:["GET /orgs/{org}/actions/permissions/selected-actions"],getAllowedActionsRepository:["GET /repos/{owner}/{repo}/actions/permissions/selected-actions"],getArtifact:["GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}"],getCustomOidcSubClaimForRepo:["GET /repos/{owner}/{repo}/actions/oidc/customization/sub"],getEnvironmentPublicKey:["GET /repos/{owner}/{repo}/environments/{environment_name}/secrets/public-key"],getEnvironmentSecret:["GET /repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}"],getEnvironmentVariable:["GET /repos/{owner}/{repo}/environments/{environment_name}/variables/{name}"],getGithubActionsDefaultWorkflowPermissionsOrganization:["GET /orgs/{org}/actions/permissions/workflow"],getGithubActionsDefaultWorkflowPermissionsRepository:["GET /repos/{owner}/{repo}/actions/permissions/workflow"],getGithubActionsPermissionsOrganization:["GET /orgs/{org}/actions/permissions"],getGithubActionsPermissionsRepository:["GET /repos/{owner}/{repo}/actions/permissions"],getJobForWorkflowRun:["GET /repos/{owner}/{repo}/actions/jobs/{job_id}"],getOrgPublicKey:["GET /orgs/{org}/actions/secrets/public-key"],getOrgSecret:["GET /orgs/{org}/actions/secrets/{secret_name}"],getOrgVariable:["GET /orgs/{org}/actions/variables/{name}"],getPendingDeploymentsForRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments"],getRepoPermissions:["GET /repos/{owner}/{repo}/actions/permissions",{},{renamed:["actions","getGithubActionsPermissionsRepository"]}],getRepoPublicKey:["GET /repos/{owner}/{repo}/actions/secrets/public-key"],getRepoSecret:["GET /repos/{owner}/{repo}/actions/secrets/{secret_name}"],getRepoVariable:["GET /repos/{owner}/{repo}/actions/variables/{name}"],getReviewsForRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/approvals"],getSelfHostedRunnerForOrg:["GET /orgs/{org}/actions/runners/{runner_id}"],getSelfHostedRunnerForRepo:["GET /repos/{owner}/{repo}/actions/runners/{runner_id}"],getWorkflow:["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}"],getWorkflowAccessToRepository:["GET /repos/{owner}/{repo}/actions/permissions/access"],getWorkflowRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}"],getWorkflowRunAttempt:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}"],getWorkflowRunUsage:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/timing"],getWorkflowUsage:["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing"],listArtifactsForRepo:["GET /repos/{owner}/{repo}/actions/artifacts"],listEnvironmentSecrets:["GET /repos/{owner}/{repo}/environments/{environment_name}/secrets"],listEnvironmentVariables:["GET /repos/{owner}/{repo}/environments/{environment_name}/variables"],listJobsForWorkflowRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/jobs"],listJobsForWorkflowRunAttempt:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs"],listLabelsForSelfHostedRunnerForOrg:["GET /orgs/{org}/actions/runners/{runner_id}/labels"],listLabelsForSelfHostedRunnerForRepo:["GET /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],listOrgSecrets:["GET /orgs/{org}/actions/secrets"],listOrgVariables:["GET /orgs/{org}/actions/variables"],listRepoOrganizationSecrets:["GET /repos/{owner}/{repo}/actions/organization-secrets"],listRepoOrganizationVariables:["GET /repos/{owner}/{repo}/actions/organization-variables"],listRepoSecrets:["GET /repos/{owner}/{repo}/actions/secrets"],listRepoVariables:["GET /repos/{owner}/{repo}/actions/variables"],listRepoWorkflows:["GET /repos/{owner}/{repo}/actions/workflows"],listRunnerApplicationsForOrg:["GET /orgs/{org}/actions/runners/downloads"],listRunnerApplicationsForRepo:["GET /repos/{owner}/{repo}/actions/runners/downloads"],listSelectedReposForOrgSecret:["GET /orgs/{org}/actions/secrets/{secret_name}/repositories"],listSelectedReposForOrgVariable:["GET /orgs/{org}/actions/variables/{name}/repositories"],listSelectedRepositoriesEnabledGithubActionsOrganization:["GET /orgs/{org}/actions/permissions/repositories"],listSelfHostedRunnersForOrg:["GET /orgs/{org}/actions/runners"],listSelfHostedRunnersForRepo:["GET /repos/{owner}/{repo}/actions/runners"],listWorkflowRunArtifacts:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/artifacts"],listWorkflowRuns:["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs"],listWorkflowRunsForRepo:["GET /repos/{owner}/{repo}/actions/runs"],reRunJobForWorkflowRun:["POST /repos/{owner}/{repo}/actions/jobs/{job_id}/rerun"],reRunWorkflow:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun"],reRunWorkflowFailedJobs:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun-failed-jobs"],removeAllCustomLabelsFromSelfHostedRunnerForOrg:["DELETE /orgs/{org}/actions/runners/{runner_id}/labels"],removeAllCustomLabelsFromSelfHostedRunnerForRepo:["DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],removeCustomLabelFromSelfHostedRunnerForOrg:["DELETE /orgs/{org}/actions/runners/{runner_id}/labels/{name}"],removeCustomLabelFromSelfHostedRunnerForRepo:["DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}/labels/{name}"],removeSelectedRepoFromOrgSecret:["DELETE /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}"],removeSelectedRepoFromOrgVariable:["DELETE /orgs/{org}/actions/variables/{name}/repositories/{repository_id}"],reviewCustomGatesForRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/deployment_protection_rule"],reviewPendingDeploymentsForRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments"],setAllowedActionsOrganization:["PUT /orgs/{org}/actions/permissions/selected-actions"],setAllowedActionsRepository:["PUT /repos/{owner}/{repo}/actions/permissions/selected-actions"],setCustomLabelsForSelfHostedRunnerForOrg:["PUT /orgs/{org}/actions/runners/{runner_id}/labels"],setCustomLabelsForSelfHostedRunnerForRepo:["PUT /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],setCustomOidcSubClaimForRepo:["PUT /repos/{owner}/{repo}/actions/oidc/customization/sub"],setGithubActionsDefaultWorkflowPermissionsOrganization:["PUT /orgs/{org}/actions/permissions/workflow"],setGithubActionsDefaultWorkflowPermissionsRepository:["PUT /repos/{owner}/{repo}/actions/permissions/workflow"],setGithubActionsPermissionsOrganization:["PUT /orgs/{org}/actions/permissions"],setGithubActionsPermissionsRepository:["PUT /repos/{owner}/{repo}/actions/permissions"],setSelectedReposForOrgSecret:["PUT /orgs/{org}/actions/secrets/{secret_name}/repositories"],setSelectedReposForOrgVariable:["PUT /orgs/{org}/actions/variables/{name}/repositories"],setSelectedRepositoriesEnabledGithubActionsOrganization:["PUT /orgs/{org}/actions/permissions/repositories"],setWorkflowAccessToRepository:["PUT /repos/{owner}/{repo}/actions/permissions/access"],updateEnvironmentVariable:["PATCH /repos/{owner}/{repo}/environments/{environment_name}/variables/{name}"],updateOrgVariable:["PATCH /orgs/{org}/actions/variables/{name}"],updateRepoVariable:["PATCH /repos/{owner}/{repo}/actions/variables/{name}"]},activity:{checkRepoIsStarredByAuthenticatedUser:["GET /user/starred/{owner}/{repo}"],deleteRepoSubscription:["DELETE /repos/{owner}/{repo}/subscription"],deleteThreadSubscription:["DELETE /notifications/threads/{thread_id}/subscription"],getFeeds:["GET /feeds"],getRepoSubscription:["GET /repos/{owner}/{repo}/subscription"],getThread:["GET /notifications/threads/{thread_id}"],getThreadSubscriptionForAuthenticatedUser:["GET /notifications/threads/{thread_id}/subscription"],listEventsForAuthenticatedUser:["GET /users/{username}/events"],listNotificationsForAuthenticatedUser:["GET /notifications"],listOrgEventsForAuthenticatedUser:["GET /users/{username}/events/orgs/{org}"],listPublicEvents:["GET /events"],listPublicEventsForRepoNetwork:["GET /networks/{owner}/{repo}/events"],listPublicEventsForUser:["GET /users/{username}/events/public"],listPublicOrgEvents:["GET /orgs/{org}/events"],listReceivedEventsForUser:["GET /users/{username}/received_events"],listReceivedPublicEventsForUser:["GET /users/{username}/received_events/public"],listRepoEvents:["GET /repos/{owner}/{repo}/events"],listRepoNotificationsForAuthenticatedUser:["GET /repos/{owner}/{repo}/notifications"],listReposStarredByAuthenticatedUser:["GET /user/starred"],listReposStarredByUser:["GET /users/{username}/starred"],listReposWatchedByUser:["GET /users/{username}/subscriptions"],listStargazersForRepo:["GET /repos/{owner}/{repo}/stargazers"],listWatchedReposForAuthenticatedUser:["GET /user/subscriptions"],listWatchersForRepo:["GET /repos/{owner}/{repo}/subscribers"],markNotificationsAsRead:["PUT /notifications"],markRepoNotificationsAsRead:["PUT /repos/{owner}/{repo}/notifications"],markThreadAsDone:["DELETE /notifications/threads/{thread_id}"],markThreadAsRead:["PATCH /notifications/threads/{thread_id}"],setRepoSubscription:["PUT /repos/{owner}/{repo}/subscription"],setThreadSubscription:["PUT /notifications/threads/{thread_id}/subscription"],starRepoForAuthenticatedUser:["PUT /user/starred/{owner}/{repo}"],unstarRepoForAuthenticatedUser:["DELETE /user/starred/{owner}/{repo}"]},apps:{addRepoToInstallation:["PUT /user/installations/{installation_id}/repositories/{repository_id}",{},{renamed:["apps","addRepoToInstallationForAuthenticatedUser"]}],addRepoToInstallationForAuthenticatedUser:["PUT /user/installations/{installation_id}/repositories/{repository_id}"],checkToken:["POST /applications/{client_id}/token"],createFromManifest:["POST /app-manifests/{code}/conversions"],createInstallationAccessToken:["POST /app/installations/{installation_id}/access_tokens"],deleteAuthorization:["DELETE /applications/{client_id}/grant"],deleteInstallation:["DELETE /app/installations/{installation_id}"],deleteToken:["DELETE /applications/{client_id}/token"],getAuthenticated:["GET /app"],getBySlug:["GET /apps/{app_slug}"],getInstallation:["GET /app/installations/{installation_id}"],getOrgInstallation:["GET /orgs/{org}/installation"],getRepoInstallation:["GET /repos/{owner}/{repo}/installation"],getSubscriptionPlanForAccount:["GET /marketplace_listing/accounts/{account_id}"],getSubscriptionPlanForAccountStubbed:["GET /marketplace_listing/stubbed/accounts/{account_id}"],getUserInstallation:["GET /users/{username}/installation"],getWebhookConfigForApp:["GET /app/hook/config"],getWebhookDelivery:["GET /app/hook/deliveries/{delivery_id}"],listAccountsForPlan:["GET /marketplace_listing/plans/{plan_id}/accounts"],listAccountsForPlanStubbed:["GET /marketplace_listing/stubbed/plans/{plan_id}/accounts"],listInstallationReposForAuthenticatedUser:["GET /user/installations/{installation_id}/repositories"],listInstallationRequestsForAuthenticatedApp:["GET /app/installation-requests"],listInstallations:["GET /app/installations"],listInstallationsForAuthenticatedUser:["GET /user/installations"],listPlans:["GET /marketplace_listing/plans"],listPlansStubbed:["GET /marketplace_listing/stubbed/plans"],listReposAccessibleToInstallation:["GET /installation/repositories"],listSubscriptionsForAuthenticatedUser:["GET /user/marketplace_purchases"],listSubscriptionsForAuthenticatedUserStubbed:["GET /user/marketplace_purchases/stubbed"],listWebhookDeliveries:["GET /app/hook/deliveries"],redeliverWebhookDelivery:["POST /app/hook/deliveries/{delivery_id}/attempts"],removeRepoFromInstallation:["DELETE /user/installations/{installation_id}/repositories/{repository_id}",{},{renamed:["apps","removeRepoFromInstallationForAuthenticatedUser"]}],removeRepoFromInstallationForAuthenticatedUser:["DELETE /user/installations/{installation_id}/repositories/{repository_id}"],resetToken:["PATCH /applications/{client_id}/token"],revokeInstallationAccessToken:["DELETE /installation/token"],scopeToken:["POST /applications/{client_id}/token/scoped"],suspendInstallation:["PUT /app/installations/{installation_id}/suspended"],unsuspendInstallation:["DELETE /app/installations/{installation_id}/suspended"],updateWebhookConfigForApp:["PATCH /app/hook/config"]},billing:{getGithubActionsBillingOrg:["GET /orgs/{org}/settings/billing/actions"],getGithubActionsBillingUser:["GET /users/{username}/settings/billing/actions"],getGithubPackagesBillingOrg:["GET /orgs/{org}/settings/billing/packages"],getGithubPackagesBillingUser:["GET /users/{username}/settings/billing/packages"],getSharedStorageBillingOrg:["GET /orgs/{org}/settings/billing/shared-storage"],getSharedStorageBillingUser:["GET /users/{username}/settings/billing/shared-storage"]},checks:{create:["POST /repos/{owner}/{repo}/check-runs"],createSuite:["POST /repos/{owner}/{repo}/check-suites"],get:["GET /repos/{owner}/{repo}/check-runs/{check_run_id}"],getSuite:["GET /repos/{owner}/{repo}/check-suites/{check_suite_id}"],listAnnotations:["GET /repos/{owner}/{repo}/check-runs/{check_run_id}/annotations"],listForRef:["GET /repos/{owner}/{repo}/commits/{ref}/check-runs"],listForSuite:["GET /repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs"],listSuitesForRef:["GET /repos/{owner}/{repo}/commits/{ref}/check-suites"],rerequestRun:["POST /repos/{owner}/{repo}/check-runs/{check_run_id}/rerequest"],rerequestSuite:["POST /repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest"],setSuitesPreferences:["PATCH /repos/{owner}/{repo}/check-suites/preferences"],update:["PATCH /repos/{owner}/{repo}/check-runs/{check_run_id}"]},codeScanning:{deleteAnalysis:["DELETE /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}{?confirm_delete}"],getAlert:["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}",{},{renamedParameters:{alert_id:"alert_number"}}],getAnalysis:["GET /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}"],getCodeqlDatabase:["GET /repos/{owner}/{repo}/code-scanning/codeql/databases/{language}"],getDefaultSetup:["GET /repos/{owner}/{repo}/code-scanning/default-setup"],getSarif:["GET /repos/{owner}/{repo}/code-scanning/sarifs/{sarif_id}"],listAlertInstances:["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances"],listAlertsForOrg:["GET /orgs/{org}/code-scanning/alerts"],listAlertsForRepo:["GET /repos/{owner}/{repo}/code-scanning/alerts"],listAlertsInstances:["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances",{},{renamed:["codeScanning","listAlertInstances"]}],listCodeqlDatabases:["GET /repos/{owner}/{repo}/code-scanning/codeql/databases"],listRecentAnalyses:["GET /repos/{owner}/{repo}/code-scanning/analyses"],updateAlert:["PATCH /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}"],updateDefaultSetup:["PATCH /repos/{owner}/{repo}/code-scanning/default-setup"],uploadSarif:["POST /repos/{owner}/{repo}/code-scanning/sarifs"]},codesOfConduct:{getAllCodesOfConduct:["GET /codes_of_conduct"],getConductCode:["GET /codes_of_conduct/{key}"]},codespaces:{addRepositoryForSecretForAuthenticatedUser:["PUT /user/codespaces/secrets/{secret_name}/repositories/{repository_id}"],addSelectedRepoToOrgSecret:["PUT /orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}"],checkPermissionsForDevcontainer:["GET /repos/{owner}/{repo}/codespaces/permissions_check"],codespaceMachinesForAuthenticatedUser:["GET /user/codespaces/{codespace_name}/machines"],createForAuthenticatedUser:["POST /user/codespaces"],createOrUpdateOrgSecret:["PUT /orgs/{org}/codespaces/secrets/{secret_name}"],createOrUpdateRepoSecret:["PUT /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"],createOrUpdateSecretForAuthenticatedUser:["PUT /user/codespaces/secrets/{secret_name}"],createWithPrForAuthenticatedUser:["POST /repos/{owner}/{repo}/pulls/{pull_number}/codespaces"],createWithRepoForAuthenticatedUser:["POST /repos/{owner}/{repo}/codespaces"],deleteForAuthenticatedUser:["DELETE /user/codespaces/{codespace_name}"],deleteFromOrganization:["DELETE /orgs/{org}/members/{username}/codespaces/{codespace_name}"],deleteOrgSecret:["DELETE /orgs/{org}/codespaces/secrets/{secret_name}"],deleteRepoSecret:["DELETE /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"],deleteSecretForAuthenticatedUser:["DELETE /user/codespaces/secrets/{secret_name}"],exportForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/exports"],getCodespacesForUserInOrg:["GET /orgs/{org}/members/{username}/codespaces"],getExportDetailsForAuthenticatedUser:["GET /user/codespaces/{codespace_name}/exports/{export_id}"],getForAuthenticatedUser:["GET /user/codespaces/{codespace_name}"],getOrgPublicKey:["GET /orgs/{org}/codespaces/secrets/public-key"],getOrgSecret:["GET /orgs/{org}/codespaces/secrets/{secret_name}"],getPublicKeyForAuthenticatedUser:["GET /user/codespaces/secrets/public-key"],getRepoPublicKey:["GET /repos/{owner}/{repo}/codespaces/secrets/public-key"],getRepoSecret:["GET /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"],getSecretForAuthenticatedUser:["GET /user/codespaces/secrets/{secret_name}"],listDevcontainersInRepositoryForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces/devcontainers"],listForAuthenticatedUser:["GET /user/codespaces"],listInOrganization:["GET /orgs/{org}/codespaces",{},{renamedParameters:{org_id:"org"}}],listInRepositoryForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces"],listOrgSecrets:["GET /orgs/{org}/codespaces/secrets"],listRepoSecrets:["GET /repos/{owner}/{repo}/codespaces/secrets"],listRepositoriesForSecretForAuthenticatedUser:["GET /user/codespaces/secrets/{secret_name}/repositories"],listSecretsForAuthenticatedUser:["GET /user/codespaces/secrets"],listSelectedReposForOrgSecret:["GET /orgs/{org}/codespaces/secrets/{secret_name}/repositories"],preFlightWithRepoForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces/new"],publishForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/publish"],removeRepositoryForSecretForAuthenticatedUser:["DELETE /user/codespaces/secrets/{secret_name}/repositories/{repository_id}"],removeSelectedRepoFromOrgSecret:["DELETE /orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}"],repoMachinesForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces/machines"],setRepositoriesForSecretForAuthenticatedUser:["PUT /user/codespaces/secrets/{secret_name}/repositories"],setSelectedReposForOrgSecret:["PUT /orgs/{org}/codespaces/secrets/{secret_name}/repositories"],startForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/start"],stopForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/stop"],stopInOrganization:["POST /orgs/{org}/members/{username}/codespaces/{codespace_name}/stop"],updateForAuthenticatedUser:["PATCH /user/codespaces/{codespace_name}"]},copilot:{addCopilotSeatsForTeams:["POST /orgs/{org}/copilot/billing/selected_teams"],addCopilotSeatsForUsers:["POST /orgs/{org}/copilot/billing/selected_users"],cancelCopilotSeatAssignmentForTeams:["DELETE /orgs/{org}/copilot/billing/selected_teams"],cancelCopilotSeatAssignmentForUsers:["DELETE /orgs/{org}/copilot/billing/selected_users"],getCopilotOrganizationDetails:["GET /orgs/{org}/copilot/billing"],getCopilotSeatDetailsForUser:["GET /orgs/{org}/members/{username}/copilot"],listCopilotSeats:["GET /orgs/{org}/copilot/billing/seats"],usageMetricsForEnterprise:["GET /enterprises/{enterprise}/copilot/usage"],usageMetricsForOrg:["GET /orgs/{org}/copilot/usage"],usageMetricsForTeam:["GET /orgs/{org}/team/{team_slug}/copilot/usage"]},dependabot:{addSelectedRepoToOrgSecret:["PUT /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}"],createOrUpdateOrgSecret:["PUT /orgs/{org}/dependabot/secrets/{secret_name}"],createOrUpdateRepoSecret:["PUT /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"],deleteOrgSecret:["DELETE /orgs/{org}/dependabot/secrets/{secret_name}"],deleteRepoSecret:["DELETE /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"],getAlert:["GET /repos/{owner}/{repo}/dependabot/alerts/{alert_number}"],getOrgPublicKey:["GET /orgs/{org}/dependabot/secrets/public-key"],getOrgSecret:["GET /orgs/{org}/dependabot/secrets/{secret_name}"],getRepoPublicKey:["GET /repos/{owner}/{repo}/dependabot/secrets/public-key"],getRepoSecret:["GET /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"],listAlertsForEnterprise:["GET /enterprises/{enterprise}/dependabot/alerts"],listAlertsForOrg:["GET /orgs/{org}/dependabot/alerts"],listAlertsForRepo:["GET /repos/{owner}/{repo}/dependabot/alerts"],listOrgSecrets:["GET /orgs/{org}/dependabot/secrets"],listRepoSecrets:["GET /repos/{owner}/{repo}/dependabot/secrets"],listSelectedReposForOrgSecret:["GET /orgs/{org}/dependabot/secrets/{secret_name}/repositories"],removeSelectedRepoFromOrgSecret:["DELETE /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}"],setSelectedReposForOrgSecret:["PUT /orgs/{org}/dependabot/secrets/{secret_name}/repositories"],updateAlert:["PATCH /repos/{owner}/{repo}/dependabot/alerts/{alert_number}"]},dependencyGraph:{createRepositorySnapshot:["POST /repos/{owner}/{repo}/dependency-graph/snapshots"],diffRange:["GET /repos/{owner}/{repo}/dependency-graph/compare/{basehead}"],exportSbom:["GET /repos/{owner}/{repo}/dependency-graph/sbom"]},emojis:{get:["GET /emojis"]},gists:{checkIsStarred:["GET /gists/{gist_id}/star"],create:["POST /gists"],createComment:["POST /gists/{gist_id}/comments"],delete:["DELETE /gists/{gist_id}"],deleteComment:["DELETE /gists/{gist_id}/comments/{comment_id}"],fork:["POST /gists/{gist_id}/forks"],get:["GET /gists/{gist_id}"],getComment:["GET /gists/{gist_id}/comments/{comment_id}"],getRevision:["GET /gists/{gist_id}/{sha}"],list:["GET /gists"],listComments:["GET /gists/{gist_id}/comments"],listCommits:["GET /gists/{gist_id}/commits"],listForUser:["GET /users/{username}/gists"],listForks:["GET /gists/{gist_id}/forks"],listPublic:["GET /gists/public"],listStarred:["GET /gists/starred"],star:["PUT /gists/{gist_id}/star"],unstar:["DELETE /gists/{gist_id}/star"],update:["PATCH /gists/{gist_id}"],updateComment:["PATCH /gists/{gist_id}/comments/{comment_id}"]},git:{createBlob:["POST /repos/{owner}/{repo}/git/blobs"],createCommit:["POST /repos/{owner}/{repo}/git/commits"],createRef:["POST /repos/{owner}/{repo}/git/refs"],createTag:["POST /repos/{owner}/{repo}/git/tags"],createTree:["POST /repos/{owner}/{repo}/git/trees"],deleteRef:["DELETE /repos/{owner}/{repo}/git/refs/{ref}"],getBlob:["GET /repos/{owner}/{repo}/git/blobs/{file_sha}"],getCommit:["GET /repos/{owner}/{repo}/git/commits/{commit_sha}"],getRef:["GET /repos/{owner}/{repo}/git/ref/{ref}"],getTag:["GET /repos/{owner}/{repo}/git/tags/{tag_sha}"],getTree:["GET /repos/{owner}/{repo}/git/trees/{tree_sha}"],listMatchingRefs:["GET /repos/{owner}/{repo}/git/matching-refs/{ref}"],updateRef:["PATCH /repos/{owner}/{repo}/git/refs/{ref}"]},gitignore:{getAllTemplates:["GET /gitignore/templates"],getTemplate:["GET /gitignore/templates/{name}"]},interactions:{getRestrictionsForAuthenticatedUser:["GET /user/interaction-limits"],getRestrictionsForOrg:["GET /orgs/{org}/interaction-limits"],getRestrictionsForRepo:["GET /repos/{owner}/{repo}/interaction-limits"],getRestrictionsForYourPublicRepos:["GET /user/interaction-limits",{},{renamed:["interactions","getRestrictionsForAuthenticatedUser"]}],removeRestrictionsForAuthenticatedUser:["DELETE /user/interaction-limits"],removeRestrictionsForOrg:["DELETE /orgs/{org}/interaction-limits"],removeRestrictionsForRepo:["DELETE /repos/{owner}/{repo}/interaction-limits"],removeRestrictionsForYourPublicRepos:["DELETE /user/interaction-limits",{},{renamed:["interactions","removeRestrictionsForAuthenticatedUser"]}],setRestrictionsForAuthenticatedUser:["PUT /user/interaction-limits"],setRestrictionsForOrg:["PUT /orgs/{org}/interaction-limits"],setRestrictionsForRepo:["PUT /repos/{owner}/{repo}/interaction-limits"],setRestrictionsForYourPublicRepos:["PUT /user/interaction-limits",{},{renamed:["interactions","setRestrictionsForAuthenticatedUser"]}]},issues:{addAssignees:["POST /repos/{owner}/{repo}/issues/{issue_number}/assignees"],addLabels:["POST /repos/{owner}/{repo}/issues/{issue_number}/labels"],checkUserCanBeAssigned:["GET /repos/{owner}/{repo}/assignees/{assignee}"],checkUserCanBeAssignedToIssue:["GET /repos/{owner}/{repo}/issues/{issue_number}/assignees/{assignee}"],create:["POST /repos/{owner}/{repo}/issues"],createComment:["POST /repos/{owner}/{repo}/issues/{issue_number}/comments"],createLabel:["POST /repos/{owner}/{repo}/labels"],createMilestone:["POST /repos/{owner}/{repo}/milestones"],deleteComment:["DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}"],deleteLabel:["DELETE /repos/{owner}/{repo}/labels/{name}"],deleteMilestone:["DELETE /repos/{owner}/{repo}/milestones/{milestone_number}"],get:["GET /repos/{owner}/{repo}/issues/{issue_number}"],getComment:["GET /repos/{owner}/{repo}/issues/comments/{comment_id}"],getEvent:["GET /repos/{owner}/{repo}/issues/events/{event_id}"],getLabel:["GET /repos/{owner}/{repo}/labels/{name}"],getMilestone:["GET /repos/{owner}/{repo}/milestones/{milestone_number}"],list:["GET /issues"],listAssignees:["GET /repos/{owner}/{repo}/assignees"],listComments:["GET /repos/{owner}/{repo}/issues/{issue_number}/comments"],listCommentsForRepo:["GET /repos/{owner}/{repo}/issues/comments"],listEvents:["GET /repos/{owner}/{repo}/issues/{issue_number}/events"],listEventsForRepo:["GET /repos/{owner}/{repo}/issues/events"],listEventsForTimeline:["GET /repos/{owner}/{repo}/issues/{issue_number}/timeline"],listForAuthenticatedUser:["GET /user/issues"],listForOrg:["GET /orgs/{org}/issues"],listForRepo:["GET /repos/{owner}/{repo}/issues"],listLabelsForMilestone:["GET /repos/{owner}/{repo}/milestones/{milestone_number}/labels"],listLabelsForRepo:["GET /repos/{owner}/{repo}/labels"],listLabelsOnIssue:["GET /repos/{owner}/{repo}/issues/{issue_number}/labels"],listMilestones:["GET /repos/{owner}/{repo}/milestones"],lock:["PUT /repos/{owner}/{repo}/issues/{issue_number}/lock"],removeAllLabels:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels"],removeAssignees:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/assignees"],removeLabel:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels/{name}"],setLabels:["PUT /repos/{owner}/{repo}/issues/{issue_number}/labels"],unlock:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/lock"],update:["PATCH /repos/{owner}/{repo}/issues/{issue_number}"],updateComment:["PATCH /repos/{owner}/{repo}/issues/comments/{comment_id}"],updateLabel:["PATCH /repos/{owner}/{repo}/labels/{name}"],updateMilestone:["PATCH /repos/{owner}/{repo}/milestones/{milestone_number}"]},licenses:{get:["GET /licenses/{license}"],getAllCommonlyUsed:["GET /licenses"],getForRepo:["GET /repos/{owner}/{repo}/license"]},markdown:{render:["POST /markdown"],renderRaw:["POST /markdown/raw",{headers:{"content-type":"text/plain; charset=utf-8"}}]},meta:{get:["GET /meta"],getAllVersions:["GET /versions"],getOctocat:["GET /octocat"],getZen:["GET /zen"],root:["GET /"]},migrations:{deleteArchiveForAuthenticatedUser:["DELETE /user/migrations/{migration_id}/archive"],deleteArchiveForOrg:["DELETE /orgs/{org}/migrations/{migration_id}/archive"],downloadArchiveForOrg:["GET /orgs/{org}/migrations/{migration_id}/archive"],getArchiveForAuthenticatedUser:["GET /user/migrations/{migration_id}/archive"],getStatusForAuthenticatedUser:["GET /user/migrations/{migration_id}"],getStatusForOrg:["GET /orgs/{org}/migrations/{migration_id}"],listForAuthenticatedUser:["GET /user/migrations"],listForOrg:["GET /orgs/{org}/migrations"],listReposForAuthenticatedUser:["GET /user/migrations/{migration_id}/repositories"],listReposForOrg:["GET /orgs/{org}/migrations/{migration_id}/repositories"],listReposForUser:["GET /user/migrations/{migration_id}/repositories",{},{renamed:["migrations","listReposForAuthenticatedUser"]}],startForAuthenticatedUser:["POST /user/migrations"],startForOrg:["POST /orgs/{org}/migrations"],unlockRepoForAuthenticatedUser:["DELETE /user/migrations/{migration_id}/repos/{repo_name}/lock"],unlockRepoForOrg:["DELETE /orgs/{org}/migrations/{migration_id}/repos/{repo_name}/lock"]},oidc:{getOidcCustomSubTemplateForOrg:["GET /orgs/{org}/actions/oidc/customization/sub"],updateOidcCustomSubTemplateForOrg:["PUT /orgs/{org}/actions/oidc/customization/sub"]},orgs:{addSecurityManagerTeam:["PUT /orgs/{org}/security-managers/teams/{team_slug}"],assignTeamToOrgRole:["PUT /orgs/{org}/organization-roles/teams/{team_slug}/{role_id}"],assignUserToOrgRole:["PUT /orgs/{org}/organization-roles/users/{username}/{role_id}"],blockUser:["PUT /orgs/{org}/blocks/{username}"],cancelInvitation:["DELETE /orgs/{org}/invitations/{invitation_id}"],checkBlockedUser:["GET /orgs/{org}/blocks/{username}"],checkMembershipForUser:["GET /orgs/{org}/members/{username}"],checkPublicMembershipForUser:["GET /orgs/{org}/public_members/{username}"],convertMemberToOutsideCollaborator:["PUT /orgs/{org}/outside_collaborators/{username}"],createCustomOrganizationRole:["POST /orgs/{org}/organization-roles"],createInvitation:["POST /orgs/{org}/invitations"],createOrUpdateCustomProperties:["PATCH /orgs/{org}/properties/schema"],createOrUpdateCustomPropertiesValuesForRepos:["PATCH /orgs/{org}/properties/values"],createOrUpdateCustomProperty:["PUT /orgs/{org}/properties/schema/{custom_property_name}"],createWebhook:["POST /orgs/{org}/hooks"],delete:["DELETE /orgs/{org}"],deleteCustomOrganizationRole:["DELETE /orgs/{org}/organization-roles/{role_id}"],deleteWebhook:["DELETE /orgs/{org}/hooks/{hook_id}"],enableOrDisableSecurityProductOnAllOrgRepos:["POST /orgs/{org}/{security_product}/{enablement}"],get:["GET /orgs/{org}"],getAllCustomProperties:["GET /orgs/{org}/properties/schema"],getCustomProperty:["GET /orgs/{org}/properties/schema/{custom_property_name}"],getMembershipForAuthenticatedUser:["GET /user/memberships/orgs/{org}"],getMembershipForUser:["GET /orgs/{org}/memberships/{username}"],getOrgRole:["GET /orgs/{org}/organization-roles/{role_id}"],getWebhook:["GET /orgs/{org}/hooks/{hook_id}"],getWebhookConfigForOrg:["GET /orgs/{org}/hooks/{hook_id}/config"],getWebhookDelivery:["GET /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}"],list:["GET /organizations"],listAppInstallations:["GET /orgs/{org}/installations"],listBlockedUsers:["GET /orgs/{org}/blocks"],listCustomPropertiesValuesForRepos:["GET /orgs/{org}/properties/values"],listFailedInvitations:["GET /orgs/{org}/failed_invitations"],listForAuthenticatedUser:["GET /user/orgs"],listForUser:["GET /users/{username}/orgs"],listInvitationTeams:["GET /orgs/{org}/invitations/{invitation_id}/teams"],listMembers:["GET /orgs/{org}/members"],listMembershipsForAuthenticatedUser:["GET /user/memberships/orgs"],listOrgRoleTeams:["GET /orgs/{org}/organization-roles/{role_id}/teams"],listOrgRoleUsers:["GET /orgs/{org}/organization-roles/{role_id}/users"],listOrgRoles:["GET /orgs/{org}/organization-roles"],listOrganizationFineGrainedPermissions:["GET /orgs/{org}/organization-fine-grained-permissions"],listOutsideCollaborators:["GET /orgs/{org}/outside_collaborators"],listPatGrantRepositories:["GET /orgs/{org}/personal-access-tokens/{pat_id}/repositories"],listPatGrantRequestRepositories:["GET /orgs/{org}/personal-access-token-requests/{pat_request_id}/repositories"],listPatGrantRequests:["GET /orgs/{org}/personal-access-token-requests"],listPatGrants:["GET /orgs/{org}/personal-access-tokens"],listPendingInvitations:["GET /orgs/{org}/invitations"],listPublicMembers:["GET /orgs/{org}/public_members"],listSecurityManagerTeams:["GET /orgs/{org}/security-managers"],listWebhookDeliveries:["GET /orgs/{org}/hooks/{hook_id}/deliveries"],listWebhooks:["GET /orgs/{org}/hooks"],patchCustomOrganizationRole:["PATCH /orgs/{org}/organization-roles/{role_id}"],pingWebhook:["POST /orgs/{org}/hooks/{hook_id}/pings"],redeliverWebhookDelivery:["POST /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/attempts"],removeCustomProperty:["DELETE /orgs/{org}/properties/schema/{custom_property_name}"],removeMember:["DELETE /orgs/{org}/members/{username}"],removeMembershipForUser:["DELETE /orgs/{org}/memberships/{username}"],removeOutsideCollaborator:["DELETE /orgs/{org}/outside_collaborators/{username}"],removePublicMembershipForAuthenticatedUser:["DELETE /orgs/{org}/public_members/{username}"],removeSecurityManagerTeam:["DELETE /orgs/{org}/security-managers/teams/{team_slug}"],reviewPatGrantRequest:["POST /orgs/{org}/personal-access-token-requests/{pat_request_id}"],reviewPatGrantRequestsInBulk:["POST /orgs/{org}/personal-access-token-requests"],revokeAllOrgRolesTeam:["DELETE /orgs/{org}/organization-roles/teams/{team_slug}"],revokeAllOrgRolesUser:["DELETE /orgs/{org}/organization-roles/users/{username}"],revokeOrgRoleTeam:["DELETE /orgs/{org}/organization-roles/teams/{team_slug}/{role_id}"],revokeOrgRoleUser:["DELETE /orgs/{org}/organization-roles/users/{username}/{role_id}"],setMembershipForUser:["PUT /orgs/{org}/memberships/{username}"],setPublicMembershipForAuthenticatedUser:["PUT /orgs/{org}/public_members/{username}"],unblockUser:["DELETE /orgs/{org}/blocks/{username}"],update:["PATCH /orgs/{org}"],updateMembershipForAuthenticatedUser:["PATCH /user/memberships/orgs/{org}"],updatePatAccess:["POST /orgs/{org}/personal-access-tokens/{pat_id}"],updatePatAccesses:["POST /orgs/{org}/personal-access-tokens"],updateWebhook:["PATCH /orgs/{org}/hooks/{hook_id}"],updateWebhookConfigForOrg:["PATCH /orgs/{org}/hooks/{hook_id}/config"]},packages:{deletePackageForAuthenticatedUser:["DELETE /user/packages/{package_type}/{package_name}"],deletePackageForOrg:["DELETE /orgs/{org}/packages/{package_type}/{package_name}"],deletePackageForUser:["DELETE /users/{username}/packages/{package_type}/{package_name}"],deletePackageVersionForAuthenticatedUser:["DELETE /user/packages/{package_type}/{package_name}/versions/{package_version_id}"],deletePackageVersionForOrg:["DELETE /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}"],deletePackageVersionForUser:["DELETE /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}"],getAllPackageVersionsForAPackageOwnedByAnOrg:["GET /orgs/{org}/packages/{package_type}/{package_name}/versions",{},{renamed:["packages","getAllPackageVersionsForPackageOwnedByOrg"]}],getAllPackageVersionsForAPackageOwnedByTheAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}/versions",{},{renamed:["packages","getAllPackageVersionsForPackageOwnedByAuthenticatedUser"]}],getAllPackageVersionsForPackageOwnedByAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}/versions"],getAllPackageVersionsForPackageOwnedByOrg:["GET /orgs/{org}/packages/{package_type}/{package_name}/versions"],getAllPackageVersionsForPackageOwnedByUser:["GET /users/{username}/packages/{package_type}/{package_name}/versions"],getPackageForAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}"],getPackageForOrganization:["GET /orgs/{org}/packages/{package_type}/{package_name}"],getPackageForUser:["GET /users/{username}/packages/{package_type}/{package_name}"],getPackageVersionForAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}/versions/{package_version_id}"],getPackageVersionForOrganization:["GET /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}"],getPackageVersionForUser:["GET /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}"],listDockerMigrationConflictingPackagesForAuthenticatedUser:["GET /user/docker/conflicts"],listDockerMigrationConflictingPackagesForOrganization:["GET /orgs/{org}/docker/conflicts"],listDockerMigrationConflictingPackagesForUser:["GET /users/{username}/docker/conflicts"],listPackagesForAuthenticatedUser:["GET /user/packages"],listPackagesForOrganization:["GET /orgs/{org}/packages"],listPackagesForUser:["GET /users/{username}/packages"],restorePackageForAuthenticatedUser:["POST /user/packages/{package_type}/{package_name}/restore{?token}"],restorePackageForOrg:["POST /orgs/{org}/packages/{package_type}/{package_name}/restore{?token}"],restorePackageForUser:["POST /users/{username}/packages/{package_type}/{package_name}/restore{?token}"],restorePackageVersionForAuthenticatedUser:["POST /user/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"],restorePackageVersionForOrg:["POST /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"],restorePackageVersionForUser:["POST /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"]},projects:{addCollaborator:["PUT /projects/{project_id}/collaborators/{username}"],createCard:["POST /projects/columns/{column_id}/cards"],createColumn:["POST /projects/{project_id}/columns"],createForAuthenticatedUser:["POST /user/projects"],createForOrg:["POST /orgs/{org}/projects"],createForRepo:["POST /repos/{owner}/{repo}/projects"],delete:["DELETE /projects/{project_id}"],deleteCard:["DELETE /projects/columns/cards/{card_id}"],deleteColumn:["DELETE /projects/columns/{column_id}"],get:["GET /projects/{project_id}"],getCard:["GET /projects/columns/cards/{card_id}"],getColumn:["GET /projects/columns/{column_id}"],getPermissionForUser:["GET /projects/{project_id}/collaborators/{username}/permission"],listCards:["GET /projects/columns/{column_id}/cards"],listCollaborators:["GET /projects/{project_id}/collaborators"],listColumns:["GET /projects/{project_id}/columns"],listForOrg:["GET /orgs/{org}/projects"],listForRepo:["GET /repos/{owner}/{repo}/projects"],listForUser:["GET /users/{username}/projects"],moveCard:["POST /projects/columns/cards/{card_id}/moves"],moveColumn:["POST /projects/columns/{column_id}/moves"],removeCollaborator:["DELETE /projects/{project_id}/collaborators/{username}"],update:["PATCH /projects/{project_id}"],updateCard:["PATCH /projects/columns/cards/{card_id}"],updateColumn:["PATCH /projects/columns/{column_id}"]},pulls:{checkIfMerged:["GET /repos/{owner}/{repo}/pulls/{pull_number}/merge"],create:["POST /repos/{owner}/{repo}/pulls"],createReplyForReviewComment:["POST /repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies"],createReview:["POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews"],createReviewComment:["POST /repos/{owner}/{repo}/pulls/{pull_number}/comments"],deletePendingReview:["DELETE /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],deleteReviewComment:["DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}"],dismissReview:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals"],get:["GET /repos/{owner}/{repo}/pulls/{pull_number}"],getReview:["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],getReviewComment:["GET /repos/{owner}/{repo}/pulls/comments/{comment_id}"],list:["GET /repos/{owner}/{repo}/pulls"],listCommentsForReview:["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments"],listCommits:["GET /repos/{owner}/{repo}/pulls/{pull_number}/commits"],listFiles:["GET /repos/{owner}/{repo}/pulls/{pull_number}/files"],listRequestedReviewers:["GET /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],listReviewComments:["GET /repos/{owner}/{repo}/pulls/{pull_number}/comments"],listReviewCommentsForRepo:["GET /repos/{owner}/{repo}/pulls/comments"],listReviews:["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews"],merge:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/merge"],removeRequestedReviewers:["DELETE /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],requestReviewers:["POST /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],submitReview:["POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events"],update:["PATCH /repos/{owner}/{repo}/pulls/{pull_number}"],updateBranch:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/update-branch"],updateReview:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],updateReviewComment:["PATCH /repos/{owner}/{repo}/pulls/comments/{comment_id}"]},rateLimit:{get:["GET /rate_limit"]},reactions:{createForCommitComment:["POST /repos/{owner}/{repo}/comments/{comment_id}/reactions"],createForIssue:["POST /repos/{owner}/{repo}/issues/{issue_number}/reactions"],createForIssueComment:["POST /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions"],createForPullRequestReviewComment:["POST /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions"],createForRelease:["POST /repos/{owner}/{repo}/releases/{release_id}/reactions"],createForTeamDiscussionCommentInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions"],createForTeamDiscussionInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions"],deleteForCommitComment:["DELETE /repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}"],deleteForIssue:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}"],deleteForIssueComment:["DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}"],deleteForPullRequestComment:["DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}"],deleteForRelease:["DELETE /repos/{owner}/{repo}/releases/{release_id}/reactions/{reaction_id}"],deleteForTeamDiscussion:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}"],deleteForTeamDiscussionComment:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}"],listForCommitComment:["GET /repos/{owner}/{repo}/comments/{comment_id}/reactions"],listForIssue:["GET /repos/{owner}/{repo}/issues/{issue_number}/reactions"],listForIssueComment:["GET /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions"],listForPullRequestReviewComment:["GET /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions"],listForRelease:["GET /repos/{owner}/{repo}/releases/{release_id}/reactions"],listForTeamDiscussionCommentInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions"],listForTeamDiscussionInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions"]},repos:{acceptInvitation:["PATCH /user/repository_invitations/{invitation_id}",{},{renamed:["repos","acceptInvitationForAuthenticatedUser"]}],acceptInvitationForAuthenticatedUser:["PATCH /user/repository_invitations/{invitation_id}"],addAppAccessRestrictions:["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",{},{mapToData:"apps"}],addCollaborator:["PUT /repos/{owner}/{repo}/collaborators/{username}"],addStatusCheckContexts:["POST /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",{},{mapToData:"contexts"}],addTeamAccessRestrictions:["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",{},{mapToData:"teams"}],addUserAccessRestrictions:["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",{},{mapToData:"users"}],cancelPagesDeployment:["POST /repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}/cancel"],checkAutomatedSecurityFixes:["GET /repos/{owner}/{repo}/automated-security-fixes"],checkCollaborator:["GET /repos/{owner}/{repo}/collaborators/{username}"],checkPrivateVulnerabilityReporting:["GET /repos/{owner}/{repo}/private-vulnerability-reporting"],checkVulnerabilityAlerts:["GET /repos/{owner}/{repo}/vulnerability-alerts"],codeownersErrors:["GET /repos/{owner}/{repo}/codeowners/errors"],compareCommits:["GET /repos/{owner}/{repo}/compare/{base}...{head}"],compareCommitsWithBasehead:["GET /repos/{owner}/{repo}/compare/{basehead}"],createAutolink:["POST /repos/{owner}/{repo}/autolinks"],createCommitComment:["POST /repos/{owner}/{repo}/commits/{commit_sha}/comments"],createCommitSignatureProtection:["POST /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"],createCommitStatus:["POST /repos/{owner}/{repo}/statuses/{sha}"],createDeployKey:["POST /repos/{owner}/{repo}/keys"],createDeployment:["POST /repos/{owner}/{repo}/deployments"],createDeploymentBranchPolicy:["POST /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies"],createDeploymentProtectionRule:["POST /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules"],createDeploymentStatus:["POST /repos/{owner}/{repo}/deployments/{deployment_id}/statuses"],createDispatchEvent:["POST /repos/{owner}/{repo}/dispatches"],createForAuthenticatedUser:["POST /user/repos"],createFork:["POST /repos/{owner}/{repo}/forks"],createInOrg:["POST /orgs/{org}/repos"],createOrUpdateCustomPropertiesValues:["PATCH /repos/{owner}/{repo}/properties/values"],createOrUpdateEnvironment:["PUT /repos/{owner}/{repo}/environments/{environment_name}"],createOrUpdateFileContents:["PUT /repos/{owner}/{repo}/contents/{path}"],createOrgRuleset:["POST /orgs/{org}/rulesets"],createPagesDeployment:["POST /repos/{owner}/{repo}/pages/deployments"],createPagesSite:["POST /repos/{owner}/{repo}/pages"],createRelease:["POST /repos/{owner}/{repo}/releases"],createRepoRuleset:["POST /repos/{owner}/{repo}/rulesets"],createTagProtection:["POST /repos/{owner}/{repo}/tags/protection"],createUsingTemplate:["POST /repos/{template_owner}/{template_repo}/generate"],createWebhook:["POST /repos/{owner}/{repo}/hooks"],declineInvitation:["DELETE /user/repository_invitations/{invitation_id}",{},{renamed:["repos","declineInvitationForAuthenticatedUser"]}],declineInvitationForAuthenticatedUser:["DELETE /user/repository_invitations/{invitation_id}"],delete:["DELETE /repos/{owner}/{repo}"],deleteAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions"],deleteAdminBranchProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],deleteAnEnvironment:["DELETE /repos/{owner}/{repo}/environments/{environment_name}"],deleteAutolink:["DELETE /repos/{owner}/{repo}/autolinks/{autolink_id}"],deleteBranchProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection"],deleteCommitComment:["DELETE /repos/{owner}/{repo}/comments/{comment_id}"],deleteCommitSignatureProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"],deleteDeployKey:["DELETE /repos/{owner}/{repo}/keys/{key_id}"],deleteDeployment:["DELETE /repos/{owner}/{repo}/deployments/{deployment_id}"],deleteDeploymentBranchPolicy:["DELETE /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"],deleteFile:["DELETE /repos/{owner}/{repo}/contents/{path}"],deleteInvitation:["DELETE /repos/{owner}/{repo}/invitations/{invitation_id}"],deleteOrgRuleset:["DELETE /orgs/{org}/rulesets/{ruleset_id}"],deletePagesSite:["DELETE /repos/{owner}/{repo}/pages"],deletePullRequestReviewProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],deleteRelease:["DELETE /repos/{owner}/{repo}/releases/{release_id}"],deleteReleaseAsset:["DELETE /repos/{owner}/{repo}/releases/assets/{asset_id}"],deleteRepoRuleset:["DELETE /repos/{owner}/{repo}/rulesets/{ruleset_id}"],deleteTagProtection:["DELETE /repos/{owner}/{repo}/tags/protection/{tag_protection_id}"],deleteWebhook:["DELETE /repos/{owner}/{repo}/hooks/{hook_id}"],disableAutomatedSecurityFixes:["DELETE /repos/{owner}/{repo}/automated-security-fixes"],disableDeploymentProtectionRule:["DELETE /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}"],disablePrivateVulnerabilityReporting:["DELETE /repos/{owner}/{repo}/private-vulnerability-reporting"],disableVulnerabilityAlerts:["DELETE /repos/{owner}/{repo}/vulnerability-alerts"],downloadArchive:["GET /repos/{owner}/{repo}/zipball/{ref}",{},{renamed:["repos","downloadZipballArchive"]}],downloadTarballArchive:["GET /repos/{owner}/{repo}/tarball/{ref}"],downloadZipballArchive:["GET /repos/{owner}/{repo}/zipball/{ref}"],enableAutomatedSecurityFixes:["PUT /repos/{owner}/{repo}/automated-security-fixes"],enablePrivateVulnerabilityReporting:["PUT /repos/{owner}/{repo}/private-vulnerability-reporting"],enableVulnerabilityAlerts:["PUT /repos/{owner}/{repo}/vulnerability-alerts"],generateReleaseNotes:["POST /repos/{owner}/{repo}/releases/generate-notes"],get:["GET /repos/{owner}/{repo}"],getAccessRestrictions:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions"],getAdminBranchProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],getAllDeploymentProtectionRules:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules"],getAllEnvironments:["GET /repos/{owner}/{repo}/environments"],getAllStatusCheckContexts:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts"],getAllTopics:["GET /repos/{owner}/{repo}/topics"],getAppsWithAccessToProtectedBranch:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps"],getAutolink:["GET /repos/{owner}/{repo}/autolinks/{autolink_id}"],getBranch:["GET /repos/{owner}/{repo}/branches/{branch}"],getBranchProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection"],getBranchRules:["GET /repos/{owner}/{repo}/rules/branches/{branch}"],getClones:["GET /repos/{owner}/{repo}/traffic/clones"],getCodeFrequencyStats:["GET /repos/{owner}/{repo}/stats/code_frequency"],getCollaboratorPermissionLevel:["GET /repos/{owner}/{repo}/collaborators/{username}/permission"],getCombinedStatusForRef:["GET /repos/{owner}/{repo}/commits/{ref}/status"],getCommit:["GET /repos/{owner}/{repo}/commits/{ref}"],getCommitActivityStats:["GET /repos/{owner}/{repo}/stats/commit_activity"],getCommitComment:["GET /repos/{owner}/{repo}/comments/{comment_id}"],getCommitSignatureProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"],getCommunityProfileMetrics:["GET /repos/{owner}/{repo}/community/profile"],getContent:["GET /repos/{owner}/{repo}/contents/{path}"],getContributorsStats:["GET /repos/{owner}/{repo}/stats/contributors"],getCustomDeploymentProtectionRule:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}"],getCustomPropertiesValues:["GET /repos/{owner}/{repo}/properties/values"],getDeployKey:["GET /repos/{owner}/{repo}/keys/{key_id}"],getDeployment:["GET /repos/{owner}/{repo}/deployments/{deployment_id}"],getDeploymentBranchPolicy:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"],getDeploymentStatus:["GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}"],getEnvironment:["GET /repos/{owner}/{repo}/environments/{environment_name}"],getLatestPagesBuild:["GET /repos/{owner}/{repo}/pages/builds/latest"],getLatestRelease:["GET /repos/{owner}/{repo}/releases/latest"],getOrgRuleSuite:["GET /orgs/{org}/rulesets/rule-suites/{rule_suite_id}"],getOrgRuleSuites:["GET /orgs/{org}/rulesets/rule-suites"],getOrgRuleset:["GET /orgs/{org}/rulesets/{ruleset_id}"],getOrgRulesets:["GET /orgs/{org}/rulesets"],getPages:["GET /repos/{owner}/{repo}/pages"],getPagesBuild:["GET /repos/{owner}/{repo}/pages/builds/{build_id}"],getPagesDeployment:["GET /repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}"],getPagesHealthCheck:["GET /repos/{owner}/{repo}/pages/health"],getParticipationStats:["GET /repos/{owner}/{repo}/stats/participation"],getPullRequestReviewProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],getPunchCardStats:["GET /repos/{owner}/{repo}/stats/punch_card"],getReadme:["GET /repos/{owner}/{repo}/readme"],getReadmeInDirectory:["GET /repos/{owner}/{repo}/readme/{dir}"],getRelease:["GET /repos/{owner}/{repo}/releases/{release_id}"],getReleaseAsset:["GET /repos/{owner}/{repo}/releases/assets/{asset_id}"],getReleaseByTag:["GET /repos/{owner}/{repo}/releases/tags/{tag}"],getRepoRuleSuite:["GET /repos/{owner}/{repo}/rulesets/rule-suites/{rule_suite_id}"],getRepoRuleSuites:["GET /repos/{owner}/{repo}/rulesets/rule-suites"],getRepoRuleset:["GET /repos/{owner}/{repo}/rulesets/{ruleset_id}"],getRepoRulesets:["GET /repos/{owner}/{repo}/rulesets"],getStatusChecksProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],getTeamsWithAccessToProtectedBranch:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams"],getTopPaths:["GET /repos/{owner}/{repo}/traffic/popular/paths"],getTopReferrers:["GET /repos/{owner}/{repo}/traffic/popular/referrers"],getUsersWithAccessToProtectedBranch:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users"],getViews:["GET /repos/{owner}/{repo}/traffic/views"],getWebhook:["GET /repos/{owner}/{repo}/hooks/{hook_id}"],getWebhookConfigForRepo:["GET /repos/{owner}/{repo}/hooks/{hook_id}/config"],getWebhookDelivery:["GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}"],listActivities:["GET /repos/{owner}/{repo}/activity"],listAutolinks:["GET /repos/{owner}/{repo}/autolinks"],listBranches:["GET /repos/{owner}/{repo}/branches"],listBranchesForHeadCommit:["GET /repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head"],listCollaborators:["GET /repos/{owner}/{repo}/collaborators"],listCommentsForCommit:["GET /repos/{owner}/{repo}/commits/{commit_sha}/comments"],listCommitCommentsForRepo:["GET /repos/{owner}/{repo}/comments"],listCommitStatusesForRef:["GET /repos/{owner}/{repo}/commits/{ref}/statuses"],listCommits:["GET /repos/{owner}/{repo}/commits"],listContributors:["GET /repos/{owner}/{repo}/contributors"],listCustomDeploymentRuleIntegrations:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/apps"],listDeployKeys:["GET /repos/{owner}/{repo}/keys"],listDeploymentBranchPolicies:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies"],listDeploymentStatuses:["GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses"],listDeployments:["GET /repos/{owner}/{repo}/deployments"],listForAuthenticatedUser:["GET /user/repos"],listForOrg:["GET /orgs/{org}/repos"],listForUser:["GET /users/{username}/repos"],listForks:["GET /repos/{owner}/{repo}/forks"],listInvitations:["GET /repos/{owner}/{repo}/invitations"],listInvitationsForAuthenticatedUser:["GET /user/repository_invitations"],listLanguages:["GET /repos/{owner}/{repo}/languages"],listPagesBuilds:["GET /repos/{owner}/{repo}/pages/builds"],listPublic:["GET /repositories"],listPullRequestsAssociatedWithCommit:["GET /repos/{owner}/{repo}/commits/{commit_sha}/pulls"],listReleaseAssets:["GET /repos/{owner}/{repo}/releases/{release_id}/assets"],listReleases:["GET /repos/{owner}/{repo}/releases"],listTagProtection:["GET /repos/{owner}/{repo}/tags/protection"],listTags:["GET /repos/{owner}/{repo}/tags"],listTeams:["GET /repos/{owner}/{repo}/teams"],listWebhookDeliveries:["GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries"],listWebhooks:["GET /repos/{owner}/{repo}/hooks"],merge:["POST /repos/{owner}/{repo}/merges"],mergeUpstream:["POST /repos/{owner}/{repo}/merge-upstream"],pingWebhook:["POST /repos/{owner}/{repo}/hooks/{hook_id}/pings"],redeliverWebhookDelivery:["POST /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/attempts"],removeAppAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",{},{mapToData:"apps"}],removeCollaborator:["DELETE /repos/{owner}/{repo}/collaborators/{username}"],removeStatusCheckContexts:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",{},{mapToData:"contexts"}],removeStatusCheckProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],removeTeamAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",{},{mapToData:"teams"}],removeUserAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",{},{mapToData:"users"}],renameBranch:["POST /repos/{owner}/{repo}/branches/{branch}/rename"],replaceAllTopics:["PUT /repos/{owner}/{repo}/topics"],requestPagesBuild:["POST /repos/{owner}/{repo}/pages/builds"],setAdminBranchProtection:["POST /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],setAppAccessRestrictions:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",{},{mapToData:"apps"}],setStatusCheckContexts:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",{},{mapToData:"contexts"}],setTeamAccessRestrictions:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",{},{mapToData:"teams"}],setUserAccessRestrictions:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",{},{mapToData:"users"}],testPushWebhook:["POST /repos/{owner}/{repo}/hooks/{hook_id}/tests"],transfer:["POST /repos/{owner}/{repo}/transfer"],update:["PATCH /repos/{owner}/{repo}"],updateBranchProtection:["PUT /repos/{owner}/{repo}/branches/{branch}/protection"],updateCommitComment:["PATCH /repos/{owner}/{repo}/comments/{comment_id}"],updateDeploymentBranchPolicy:["PUT /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"],updateInformationAboutPagesSite:["PUT /repos/{owner}/{repo}/pages"],updateInvitation:["PATCH /repos/{owner}/{repo}/invitations/{invitation_id}"],updateOrgRuleset:["PUT /orgs/{org}/rulesets/{ruleset_id}"],updatePullRequestReviewProtection:["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],updateRelease:["PATCH /repos/{owner}/{repo}/releases/{release_id}"],updateReleaseAsset:["PATCH /repos/{owner}/{repo}/releases/assets/{asset_id}"],updateRepoRuleset:["PUT /repos/{owner}/{repo}/rulesets/{ruleset_id}"],updateStatusCheckPotection:["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks",{},{renamed:["repos","updateStatusCheckProtection"]}],updateStatusCheckProtection:["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],updateWebhook:["PATCH /repos/{owner}/{repo}/hooks/{hook_id}"],updateWebhookConfigForRepo:["PATCH /repos/{owner}/{repo}/hooks/{hook_id}/config"],uploadReleaseAsset:["POST /repos/{owner}/{repo}/releases/{release_id}/assets{?name,label}",{baseUrl:"https://uploads.github.com"}]},search:{code:["GET /search/code"],commits:["GET /search/commits"],issuesAndPullRequests:["GET /search/issues"],labels:["GET /search/labels"],repos:["GET /search/repositories"],topics:["GET /search/topics"],users:["GET /search/users"]},secretScanning:{getAlert:["GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}"],listAlertsForEnterprise:["GET /enterprises/{enterprise}/secret-scanning/alerts"],listAlertsForOrg:["GET /orgs/{org}/secret-scanning/alerts"],listAlertsForRepo:["GET /repos/{owner}/{repo}/secret-scanning/alerts"],listLocationsForAlert:["GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locations"],updateAlert:["PATCH /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}"]},securityAdvisories:{createFork:["POST /repos/{owner}/{repo}/security-advisories/{ghsa_id}/forks"],createPrivateVulnerabilityReport:["POST /repos/{owner}/{repo}/security-advisories/reports"],createRepositoryAdvisory:["POST /repos/{owner}/{repo}/security-advisories"],createRepositoryAdvisoryCveRequest:["POST /repos/{owner}/{repo}/security-advisories/{ghsa_id}/cve"],getGlobalAdvisory:["GET /advisories/{ghsa_id}"],getRepositoryAdvisory:["GET /repos/{owner}/{repo}/security-advisories/{ghsa_id}"],listGlobalAdvisories:["GET /advisories"],listOrgRepositoryAdvisories:["GET /orgs/{org}/security-advisories"],listRepositoryAdvisories:["GET /repos/{owner}/{repo}/security-advisories"],updateRepositoryAdvisory:["PATCH /repos/{owner}/{repo}/security-advisories/{ghsa_id}"]},teams:{addOrUpdateMembershipForUserInOrg:["PUT /orgs/{org}/teams/{team_slug}/memberships/{username}"],addOrUpdateProjectPermissionsInOrg:["PUT /orgs/{org}/teams/{team_slug}/projects/{project_id}"],addOrUpdateRepoPermissionsInOrg:["PUT /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],checkPermissionsForProjectInOrg:["GET /orgs/{org}/teams/{team_slug}/projects/{project_id}"],checkPermissionsForRepoInOrg:["GET /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],create:["POST /orgs/{org}/teams"],createDiscussionCommentInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments"],createDiscussionInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions"],deleteDiscussionCommentInOrg:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],deleteDiscussionInOrg:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],deleteInOrg:["DELETE /orgs/{org}/teams/{team_slug}"],getByName:["GET /orgs/{org}/teams/{team_slug}"],getDiscussionCommentInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],getDiscussionInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],getMembershipForUserInOrg:["GET /orgs/{org}/teams/{team_slug}/memberships/{username}"],list:["GET /orgs/{org}/teams"],listChildInOrg:["GET /orgs/{org}/teams/{team_slug}/teams"],listDiscussionCommentsInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments"],listDiscussionsInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions"],listForAuthenticatedUser:["GET /user/teams"],listMembersInOrg:["GET /orgs/{org}/teams/{team_slug}/members"],listPendingInvitationsInOrg:["GET /orgs/{org}/teams/{team_slug}/invitations"],listProjectsInOrg:["GET /orgs/{org}/teams/{team_slug}/projects"],listReposInOrg:["GET /orgs/{org}/teams/{team_slug}/repos"],removeMembershipForUserInOrg:["DELETE /orgs/{org}/teams/{team_slug}/memberships/{username}"],removeProjectInOrg:["DELETE /orgs/{org}/teams/{team_slug}/projects/{project_id}"],removeRepoInOrg:["DELETE /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],updateDiscussionCommentInOrg:["PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],updateDiscussionInOrg:["PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],updateInOrg:["PATCH /orgs/{org}/teams/{team_slug}"]},users:{addEmailForAuthenticated:["POST /user/emails",{},{renamed:["users","addEmailForAuthenticatedUser"]}],addEmailForAuthenticatedUser:["POST /user/emails"],addSocialAccountForAuthenticatedUser:["POST /user/social_accounts"],block:["PUT /user/blocks/{username}"],checkBlocked:["GET /user/blocks/{username}"],checkFollowingForUser:["GET /users/{username}/following/{target_user}"],checkPersonIsFollowedByAuthenticated:["GET /user/following/{username}"],createGpgKeyForAuthenticated:["POST /user/gpg_keys",{},{renamed:["users","createGpgKeyForAuthenticatedUser"]}],createGpgKeyForAuthenticatedUser:["POST /user/gpg_keys"],createPublicSshKeyForAuthenticated:["POST /user/keys",{},{renamed:["users","createPublicSshKeyForAuthenticatedUser"]}],createPublicSshKeyForAuthenticatedUser:["POST /user/keys"],createSshSigningKeyForAuthenticatedUser:["POST /user/ssh_signing_keys"],deleteEmailForAuthenticated:["DELETE /user/emails",{},{renamed:["users","deleteEmailForAuthenticatedUser"]}],deleteEmailForAuthenticatedUser:["DELETE /user/emails"],deleteGpgKeyForAuthenticated:["DELETE /user/gpg_keys/{gpg_key_id}",{},{renamed:["users","deleteGpgKeyForAuthenticatedUser"]}],deleteGpgKeyForAuthenticatedUser:["DELETE /user/gpg_keys/{gpg_key_id}"],deletePublicSshKeyForAuthenticated:["DELETE /user/keys/{key_id}",{},{renamed:["users","deletePublicSshKeyForAuthenticatedUser"]}],deletePublicSshKeyForAuthenticatedUser:["DELETE /user/keys/{key_id}"],deleteSocialAccountForAuthenticatedUser:["DELETE /user/social_accounts"],deleteSshSigningKeyForAuthenticatedUser:["DELETE /user/ssh_signing_keys/{ssh_signing_key_id}"],follow:["PUT /user/following/{username}"],getAuthenticated:["GET /user"],getByUsername:["GET /users/{username}"],getContextForUser:["GET /users/{username}/hovercard"],getGpgKeyForAuthenticated:["GET /user/gpg_keys/{gpg_key_id}",{},{renamed:["users","getGpgKeyForAuthenticatedUser"]}],getGpgKeyForAuthenticatedUser:["GET /user/gpg_keys/{gpg_key_id}"],getPublicSshKeyForAuthenticated:["GET /user/keys/{key_id}",{},{renamed:["users","getPublicSshKeyForAuthenticatedUser"]}],getPublicSshKeyForAuthenticatedUser:["GET /user/keys/{key_id}"],getSshSigningKeyForAuthenticatedUser:["GET /user/ssh_signing_keys/{ssh_signing_key_id}"],list:["GET /users"],listBlockedByAuthenticated:["GET /user/blocks",{},{renamed:["users","listBlockedByAuthenticatedUser"]}],listBlockedByAuthenticatedUser:["GET /user/blocks"],listEmailsForAuthenticated:["GET /user/emails",{},{renamed:["users","listEmailsForAuthenticatedUser"]}],listEmailsForAuthenticatedUser:["GET /user/emails"],listFollowedByAuthenticated:["GET /user/following",{},{renamed:["users","listFollowedByAuthenticatedUser"]}],listFollowedByAuthenticatedUser:["GET /user/following"],listFollowersForAuthenticatedUser:["GET /user/followers"],listFollowersForUser:["GET /users/{username}/followers"],listFollowingForUser:["GET /users/{username}/following"],listGpgKeysForAuthenticated:["GET /user/gpg_keys",{},{renamed:["users","listGpgKeysForAuthenticatedUser"]}],listGpgKeysForAuthenticatedUser:["GET /user/gpg_keys"],listGpgKeysForUser:["GET /users/{username}/gpg_keys"],listPublicEmailsForAuthenticated:["GET /user/public_emails",{},{renamed:["users","listPublicEmailsForAuthenticatedUser"]}],listPublicEmailsForAuthenticatedUser:["GET /user/public_emails"],listPublicKeysForUser:["GET /users/{username}/keys"],listPublicSshKeysForAuthenticated:["GET /user/keys",{},{renamed:["users","listPublicSshKeysForAuthenticatedUser"]}],listPublicSshKeysForAuthenticatedUser:["GET /user/keys"],listSocialAccountsForAuthenticatedUser:["GET /user/social_accounts"],listSocialAccountsForUser:["GET /users/{username}/social_accounts"],listSshSigningKeysForAuthenticatedUser:["GET /user/ssh_signing_keys"],listSshSigningKeysForUser:["GET /users/{username}/ssh_signing_keys"],setPrimaryEmailVisibilityForAuthenticated:["PATCH /user/email/visibility",{},{renamed:["users","setPrimaryEmailVisibilityForAuthenticatedUser"]}],setPrimaryEmailVisibilityForAuthenticatedUser:["PATCH /user/email/visibility"],unblock:["DELETE /user/blocks/{username}"],unfollow:["DELETE /user/following/{username}"],updateAuthenticated:["PATCH /user"]}};var js=Is;const Q=new Map;for(const[e,t]of Object.entries(js))for(const[r,o]of Object.entries(t)){const[n,i,a]=o,[p,m]=n.split(/ /),f=Object.assign({method:p,url:m},i);Q.has(e)||Q.set(e,new Map),Q.get(e).set(r,{scope:e,methodName:r,endpointDefaults:f,decorations:a})}const qs={has({scope:e},t){return Q.get(e).has(t)},getOwnPropertyDescriptor(e,t){return{value:this.get(e,t),configurable:!0,writable:!0,enumerable:!0}},defineProperty(e,t,r){return Object.defineProperty(e.cache,t,r),!0},deleteProperty(e,t){return delete e.cache[t],!0},ownKeys({scope:e}){return[...Q.get(e).keys()]},set(e,t,r){return e.cache[t]=r},get({octokit:e,scope:t,cache:r},o){if(r[o])return r[o];const n=Q.get(t).get(o);if(!n)return;const{endpointDefaults:i,decorations:a}=n;return a?r[o]=Ws(e,t,o,i,a):r[o]=e.request.defaults(i),r[o]}};function $s(e){const t={};for(const r of Q.keys())t[r]=new Proxy({octokit:e,scope:r,cache:{}},qs);return t}function Ws(e,t,r,o,n){const i=e.request.defaults(o);function a(...p){let m=i.endpoint.merge(...p);if(n.mapToData)return m=Object.assign({},m,{data:m[n.mapToData],[n.mapToData]:void 0}),i(m);if(n.renamed){const[f,b]=n.renamed;e.log.warn(`octokit.${t}.${r}() has been renamed to octokit.${f}.${b}()`)}if(n.deprecated&&e.log.warn(n.deprecated),n.renamedParameters){const f=i.endpoint.merge(...p);for(const[b,w]of Object.entries(n.renamedParameters))b in f&&(e.log.warn(`"${b}" parameter is deprecated for "octokit.${t}.${r}()". Use "${w}" instead`),w in f||(f[w]=f[b]),delete f[b]);return i(f)}return i(...p)}return Object.assign(a,i)}function or(e){return{rest:$s(e)}}or.VERSION=Ls;var Oe=typeof globalThis<"u"?globalThis:typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:{};function xs(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}var nr={exports:{}};(function(e,t){(function(r,o){e.exports=o()})(Oe,function(){var r=typeof globalThis<"u"?globalThis:typeof window<"u"?window:typeof Oe<"u"?Oe:typeof self<"u"?self:{};function o(T){return T&&T.default||T}var n=function(T,c,s={}){var l,u,d;for(l in c)d=c[l],s[l]=(u=T[l])!=null?u:d;return s},i=function(T,c,s={}){var l,u;for(l in T)u=T[l],c[l]!==void 0&&(s[l]=u);return s},a={load:n,overwrite:i},p;p=class{constructor(c,s){this.incr=c,this.decr=s,this._first=null,this._last=null,this.length=0}push(c){var s;this.length++,typeof this.incr=="function"&&this.incr(),s={value:c,prev:this._last,next:null},this._last!=null?(this._last.next=s,this._last=s):this._first=this._last=s}shift(){var c;if(this._first!=null)return this.length--,typeof this.decr=="function"&&this.decr(),c=this._first.value,(this._first=this._first.next)!=null?this._first.prev=null:this._last=null,c}first(){if(this._first!=null)return this._first.value}getArray(){var c,s,l;for(c=this._first,l=[];c!=null;)l.push((s=c,c=c.next,s.value));return l}forEachShift(c){var s;for(s=this.shift();s!=null;)c(s),s=this.shift()}debug(){var c,s,l,u,d;for(c=this._first,d=[];c!=null;)d.push((s=c,c=c.next,{value:s.value,prev:(l=s.prev)!=null?l.value:void 0,next:(u=s.next)!=null?u.value:void 0}));return d}};var m=p,f;f=class{constructor(c){if(this.instance=c,this._events={},this.instance.on!=null||this.instance.once!=null||this.instance.removeAllListeners!=null)throw new Error("An Emitter already exists for this object");this.instance.on=(s,l)=>this._addListener(s,"many",l),this.instance.once=(s,l)=>this._addListener(s,"once",l),this.instance.removeAllListeners=(s=null)=>s!=null?delete this._events[s]:this._events={}}_addListener(c,s,l){var u;return(u=this._events)[c]==null&&(u[c]=[]),this._events[c].push({cb:l,status:s}),this.instance}listenerCount(c){return this._events[c]!=null?this._events[c].length:0}async trigger(c,...s){var l,u;try{return c!=="debug"&&this.trigger("debug",`Event triggered: ${c}`,s),this._events[c]==null?void 0:(this._events[c]=this._events[c].filter(function(d){return d.status!=="none"}),u=this._events[c].map(async d=>{var g,E;if(d.status!=="none"){d.status==="once"&&(d.status="none");try{return E=typeof d.cb=="function"?d.cb(...s):void 0,typeof(E!=null?E.then:void 0)=="function"?await E:E}catch(G){return g=G,this.trigger("error",g),null}}}),(await Promise.all(u)).find(function(d){return d!=null}))}catch(d){return l=d,this.trigger("error",l),null}}};var b=f,w,y,P;w=m,y=b,P=class{constructor(c){this.Events=new y(this),this._length=0,this._lists=(function(){var s,l,u;for(u=[],s=1,l=c;1<=l?s<=l:s>=l;1<=l?++s:--s)u.push(new w(()=>this.incr(),()=>this.decr()));return u}).call(this)}incr(){if(this._length++===0)return this.Events.trigger("leftzero")}decr(){if(--this._length===0)return this.Events.trigger("zero")}push(c){return this._lists[c.options.priority].push(c)}queued(c){return c!=null?this._lists[c].length:this._length}shiftAll(c){return this._lists.forEach(function(s){return s.forEachShift(c)})}getFirst(c=this._lists){var s,l,u;for(s=0,l=c.length;s<l;s++)if(u=c[s],u.length>0)return u;return[]}shiftLastFrom(c){return this.getFirst(this._lists.slice(c).reverse()).shift()}};var R=P,k;k=class extends Error{};var h=k,_,v,S,O,A;O=10,v=5,A=a,_=h,S=class{constructor(c,s,l,u,d,g,E,G){this.task=c,this.args=s,this.rejectOnDrop=d,this.Events=g,this._states=E,this.Promise=G,this.options=A.load(l,u),this.options.priority=this._sanitizePriority(this.options.priority),this.options.id===u.id&&(this.options.id=`${this.options.id}-${this._randomIndex()}`),this.promise=new this.Promise((U,D)=>{this._resolve=U,this._reject=D}),this.retryCount=0}_sanitizePriority(c){var s;return s=~~c!==c?v:c,s<0?0:s>O-1?O-1:s}_randomIndex(){return Math.random().toString(36).slice(2)}doDrop({error:c,message:s="This job has been dropped by Bottleneck"}={}){return this._states.remove(this.options.id)?(this.rejectOnDrop&&this._reject(c??new _(s)),this.Events.trigger("dropped",{args:this.args,options:this.options,task:this.task,promise:this.promise}),!0):!1}_assertStatus(c){var s;if(s=this._states.jobStatus(this.options.id),!(s===c||c==="DONE"&&s===null))throw new _(`Invalid job status ${s}, expected ${c}. Please open an issue at https://github.com/SGrondin/bottleneck/issues`)}doReceive(){return this._states.start(this.options.id),this.Events.trigger("received",{args:this.args,options:this.options})}doQueue(c,s){return this._assertStatus("RECEIVED"),this._states.next(this.options.id),this.Events.trigger("queued",{args:this.args,options:this.options,reachedHWM:c,blocked:s})}doRun(){return this.retryCount===0?(this._assertStatus("QUEUED"),this._states.next(this.options.id)):this._assertStatus("EXECUTING"),this.Events.trigger("scheduled",{args:this.args,options:this.options})}async doExecute(c,s,l,u){var d,g,E;this.retryCount===0?(this._assertStatus("RUNNING"),this._states.next(this.options.id)):this._assertStatus("EXECUTING"),g={args:this.args,options:this.options,retryCount:this.retryCount},this.Events.trigger("executing",g);try{if(E=await(c!=null?c.schedule(this.options,this.task,...this.args):this.task(...this.args)),s())return this.doDone(g),await u(this.options,g),this._assertStatus("DONE"),this._resolve(E)}catch(G){return d=G,this._onFailure(d,g,s,l,u)}}doExpire(c,s,l){var u,d;return this._states.jobStatus(this.options.id==="RUNNING")&&this._states.next(this.options.id),this._assertStatus("EXECUTING"),d={args:this.args,options:this.options,retryCount:this.retryCount},u=new _(`This job timed out after ${this.options.expiration} ms.`),this._onFailure(u,d,c,s,l)}async _onFailure(c,s,l,u,d){var g,E;if(l())return g=await this.Events.trigger("failed",c,s),g!=null?(E=~~g,this.Events.trigger("retry",`Retrying ${this.options.id} after ${E} ms`,s),this.retryCount++,u(E)):(this.doDone(s),await d(this.options,s),this._assertStatus("DONE"),this._reject(c))}doDone(c){return this._assertStatus("EXECUTING"),this._states.next(this.options.id),this.Events.trigger("done",c)}};var $=S,Y,Ee,Te;Te=a,Y=h,Ee=class{constructor(c,s,l){this.instance=c,this.storeOptions=s,this.clientId=this.instance._randomIndex(),Te.load(l,l,this),this._nextRequest=this._lastReservoirRefresh=this._lastReservoirIncrease=Date.now(),this._running=0,this._done=0,this._unblockTime=0,this.ready=this.Promise.resolve(),this.clients={},this._startHeartbeat()}_startHeartbeat(){var c;return this.heartbeat==null&&(this.storeOptions.reservoirRefreshInterval!=null&&this.storeOptions.reservoirRefreshAmount!=null||this.storeOptions.reservoirIncreaseInterval!=null&&this.storeOptions.reservoirIncreaseAmount!=null)?typeof(c=this.heartbeat=setInterval(()=>{var s,l,u,d,g;if(d=Date.now(),this.storeOptions.reservoirRefreshInterval!=null&&d>=this._lastReservoirRefresh+this.storeOptions.reservoirRefreshInterval&&(this._lastReservoirRefresh=d,this.storeOptions.reservoir=this.storeOptions.reservoirRefreshAmount,this.instance._drainAll(this.computeCapacity())),this.storeOptions.reservoirIncreaseInterval!=null&&d>=this._lastReservoirIncrease+this.storeOptions.reservoirIncreaseInterval&&({reservoirIncreaseAmount:s,reservoirIncreaseMaximum:u,reservoir:g}=this.storeOptions,this._lastReservoirIncrease=d,l=u!=null?Math.min(s,u-g):s,l>0))return this.storeOptions.reservoir+=l,this.instance._drainAll(this.computeCapacity())},this.heartbeatInterval)).unref=="function"?c.unref():void 0:clearInterval(this.heartbeat)}async __publish__(c){return await this.yieldLoop(),this.instance.Events.trigger("message",c.toString())}async __disconnect__(c){return await this.yieldLoop(),clearInterval(this.heartbeat),this.Promise.resolve()}yieldLoop(c=0){return new this.Promise(function(s,l){return setTimeout(s,c)})}computePenalty(){var c;return(c=this.storeOptions.penalty)!=null?c:15*this.storeOptions.minTime||5e3}async __updateSettings__(c){return await this.yieldLoop(),Te.overwrite(c,c,this.storeOptions),this._startHeartbeat(),this.instance._drainAll(this.computeCapacity()),!0}async __running__(){return await this.yieldLoop(),this._running}async __queued__(){return await this.yieldLoop(),this.instance.queued()}async __done__(){return await this.yieldLoop(),this._done}async __groupCheck__(c){return await this.yieldLoop(),this._nextRequest+this.timeout<c}computeCapacity(){var c,s;return{maxConcurrent:c,reservoir:s}=this.storeOptions,c!=null&&s!=null?Math.min(c-this._running,s):c!=null?c-this._running:s??null}conditionsCheck(c){var s;return s=this.computeCapacity(),s==null||c<=s}async __incrementReservoir__(c){var s;return await this.yieldLoop(),s=this.storeOptions.reservoir+=c,this.instance._drainAll(this.computeCapacity()),s}async __currentReservoir__(){return await this.yieldLoop(),this.storeOptions.reservoir}isBlocked(c){return this._unblockTime>=c}check(c,s){return this.conditionsCheck(c)&&this._nextRequest-s<=0}async __check__(c){var s;return await this.yieldLoop(),s=Date.now(),this.check(c,s)}async __register__(c,s,l){var u,d;return await this.yieldLoop(),u=Date.now(),this.conditionsCheck(s)?(this._running+=s,this.storeOptions.reservoir!=null&&(this.storeOptions.reservoir-=s),d=Math.max(this._nextRequest-u,0),this._nextRequest=u+d+this.storeOptions.minTime,{success:!0,wait:d,reservoir:this.storeOptions.reservoir}):{success:!1}}strategyIsBlock(){return this.storeOptions.strategy===3}async __submit__(c,s){var l,u,d;if(await this.yieldLoop(),this.storeOptions.maxConcurrent!=null&&s>this.storeOptions.maxConcurrent)throw new Y(`Impossible to add a job having a weight of ${s} to a limiter having a maxConcurrent setting of ${this.storeOptions.maxConcurrent}`);return u=Date.now(),d=this.storeOptions.highWater!=null&&c===this.storeOptions.highWater&&!this.check(s,u),l=this.strategyIsBlock()&&(d||this.isBlocked(u)),l&&(this._unblockTime=u+this.computePenalty(),this._nextRequest=this._unblockTime+this.storeOptions.minTime,this.instance._dropAllQueued()),{reachedHWM:d,blocked:l,strategy:this.storeOptions.strategy}}async __free__(c,s){return await this.yieldLoop(),this._running-=s,this._done+=s,this.instance._drainAll(this.computeCapacity()),{running:this._running}}};var ur=Ee,Ve,Me;Ve=h,Me=class{constructor(c){this.status=c,this._jobs={},this.counts=this.status.map(function(){return 0})}next(c){var s,l;if(s=this._jobs[c],l=s+1,s!=null&&l<this.status.length)return this.counts[s]--,this.counts[l]++,this._jobs[c]++;if(s!=null)return this.counts[s]--,delete this._jobs[c]}start(c){var s;return s=0,this._jobs[c]=s,this.counts[s]++}remove(c){var s;return s=this._jobs[c],s!=null&&(this.counts[s]--,delete this._jobs[c]),s!=null}jobStatus(c){var s;return(s=this.status[this._jobs[c]])!=null?s:null}statusJobs(c){var s,l,u,d,g;if(c!=null){if(l=this.status.indexOf(c),l<0)throw new Ve(`status must be one of ${this.status.join(", ")}`);u=this._jobs,d=[];for(s in u)g=u[s],g===l&&d.push(s);return d}else return Object.keys(this._jobs)}statusCounts(){return this.counts.reduce((c,s,l)=>(c[this.status[l]]=s,c),{})}};var pr=Me,ze,Ke;ze=m,Ke=class{constructor(c,s){this.schedule=this.schedule.bind(this),this.name=c,this.Promise=s,this._running=0,this._queue=new ze}isEmpty(){return this._queue.length===0}async _tryToRun(){var c,s,l,u,d,g,E;if(this._running<1&&this._queue.length>0)return this._running++,{task:E,args:c,resolve:d,reject:u}=this._queue.shift(),s=await async function(){try{return g=await E(...c),function(){return d(g)}}catch(G){return l=G,function(){return u(l)}}}(),this._running--,this._tryToRun(),s()}schedule(c,...s){var l,u,d;return d=u=null,l=new this.Promise(function(g,E){return d=g,u=E}),this._queue.push({task:c,args:s,resolve:d,reject:u}),this._tryToRun(),l}};var dr=Ke,Qe="2.19.5",gr={version:Qe},hr=Object.freeze({version:Qe,default:gr}),Je=()=>console.log("You must import the full version of Bottleneck in order to use this feature."),Ye=()=>console.log("You must import the full version of Bottleneck in order to use this feature."),mr=()=>console.log("You must import the full version of Bottleneck in order to use this feature."),Xe,Ze,et,tt,rt,ge;ge=a,Xe=b,tt=Je,et=Ye,rt=mr,Ze=(function(){class T{constructor(s={}){this.deleteKey=this.deleteKey.bind(this),this.limiterOptions=s,ge.load(this.limiterOptions,this.defaults,this),this.Events=new Xe(this),this.instances={},this.Bottleneck=gt,this._startAutoCleanup(),this.sharedConnection=this.connection!=null,this.connection==null&&(this.limiterOptions.datastore==="redis"?this.connection=new tt(Object.assign({},this.limiterOptions,{Events:this.Events})):this.limiterOptions.datastore==="ioredis"&&(this.connection=new et(Object.assign({},this.limiterOptions,{Events:this.Events}))))}key(s=""){var l;return(l=this.instances[s])!=null?l:(()=>{var u;return u=this.instances[s]=new this.Bottleneck(Object.assign(this.limiterOptions,{id:`${this.id}-${s}`,timeout:this.timeout,connection:this.connection})),this.Events.trigger("created",u,s),u})()}async deleteKey(s=""){var l,u;return u=this.instances[s],this.connection&&(l=await this.connection.__runCommand__(["del",...rt.allKeys(`${this.id}-${s}`)])),u!=null&&(delete this.instances[s],await u.disconnect()),u!=null||l>0}limiters(){var s,l,u,d;l=this.instances,u=[];for(s in l)d=l[s],u.push({key:s,limiter:d});return u}keys(){return Object.keys(this.instances)}async clusterKeys(){var s,l,u,d,g,E,G,U,D;if(this.connection==null)return this.Promise.resolve(this.keys());for(E=[],s=null,D=`b_${this.id}-`.length,l=9;s!==0;)for([U,u]=await this.connection.__runCommand__(["scan",s??0,"match",`b_${this.id}-*_settings`,"count",1e4]),s=~~U,d=0,G=u.length;d<G;d++)g=u[d],E.push(g.slice(D,-l));return E}_startAutoCleanup(){var s;return clearInterval(this.interval),typeof(s=this.interval=setInterval(async()=>{var l,u,d,g,E,G;E=Date.now(),d=this.instances,g=[];for(u in d){G=d[u];try{await G._store.__groupCheck__(E)?g.push(this.deleteKey(u)):g.push(void 0)}catch(U){l=U,g.push(G.Events.trigger("error",l))}}return g},this.timeout/2)).unref=="function"?s.unref():void 0}updateSettings(s={}){if(ge.overwrite(s,this.defaults,this),ge.overwrite(s,s,this.limiterOptions),s.timeout!=null)return this._startAutoCleanup()}disconnect(s=!0){var l;if(!this.sharedConnection)return(l=this.connection)!=null?l.disconnect(s):void 0}}return T.prototype.defaults={timeout:1e3*60*5,connection:null,Promise,id:"group-key"},T}).call(r);var fr=Ze,st,ot,nt;nt=a,ot=b,st=(function(){class T{constructor(s={}){this.options=s,nt.load(this.options,this.defaults,this),this.Events=new ot(this),this._arr=[],this._resetPromise(),this._lastFlush=Date.now()}_resetPromise(){return this._promise=new this.Promise((s,l)=>this._resolve=s)}_flush(){return clearTimeout(this._timeout),this._lastFlush=Date.now(),this._resolve(),this.Events.trigger("batch",this._arr),this._arr=[],this._resetPromise()}add(s){var l;return this._arr.push(s),l=this._promise,this._arr.length===this.maxSize?this._flush():this.maxTime!=null&&this._arr.length===1&&(this._timeout=setTimeout(()=>this._flush(),this.maxTime)),l}}return T.prototype.defaults={maxTime:null,maxSize:null,Promise},T}).call(r);var _r=st,Er=()=>console.log("You must import the full version of Bottleneck in order to use this feature."),Tr=o(hr),it,at,be,we,ct,ve,lt,ut,pt,ye,x,dt=[].splice;ve=10,at=5,x=a,lt=R,we=$,ct=ur,ut=Er,be=b,pt=pr,ye=dr,it=(function(){class T{constructor(s={},...l){var u,d;this._addToQueue=this._addToQueue.bind(this),this._validateOptions(s,l),x.load(s,this.instanceDefaults,this),this._queues=new lt(ve),this._scheduled={},this._states=new pt(["RECEIVED","QUEUED","RUNNING","EXECUTING"].concat(this.trackDoneStatus?["DONE"]:[])),this._limiter=null,this.Events=new be(this),this._submitLock=new ye("submit",this.Promise),this._registerLock=new ye("register",this.Promise),d=x.load(s,this.storeDefaults,{}),this._store=(function(){if(this.datastore==="redis"||this.datastore==="ioredis"||this.connection!=null)return u=x.load(s,this.redisStoreDefaults,{}),new ut(this,d,u);if(this.datastore==="local")return u=x.load(s,this.localStoreDefaults,{}),new ct(this,d,u);throw new T.prototype.BottleneckError(`Invalid datastore type: ${this.datastore}`)}).call(this),this._queues.on("leftzero",()=>{var g;return(g=this._store.heartbeat)!=null&&typeof g.ref=="function"?g.ref():void 0}),this._queues.on("zero",()=>{var g;return(g=this._store.heartbeat)!=null&&typeof g.unref=="function"?g.unref():void 0})}_validateOptions(s,l){if(!(s!=null&&typeof s=="object"&&l.length===0))throw new T.prototype.BottleneckError("Bottleneck v2 takes a single object argument. Refer to https://github.com/SGrondin/bottleneck#upgrading-to-v2 if you're upgrading from Bottleneck v1.")}ready(){return this._store.ready}clients(){return this._store.clients}channel(){return`b_${this.id}`}channel_client(){return`b_${this.id}_${this._store.clientId}`}publish(s){return this._store.__publish__(s)}disconnect(s=!0){return this._store.__disconnect__(s)}chain(s){return this._limiter=s,this}queued(s){return this._queues.queued(s)}clusterQueued(){return this._store.__queued__()}empty(){return this.queued()===0&&this._submitLock.isEmpty()}running(){return this._store.__running__()}done(){return this._store.__done__()}jobStatus(s){return this._states.jobStatus(s)}jobs(s){return this._states.statusJobs(s)}counts(){return this._states.statusCounts()}_randomIndex(){return Math.random().toString(36).slice(2)}check(s=1){return this._store.__check__(s)}_clearGlobalState(s){return this._scheduled[s]!=null?(clearTimeout(this._scheduled[s].expiration),delete this._scheduled[s],!0):!1}async _free(s,l,u,d){var g,E;try{if({running:E}=await this._store.__free__(s,u.weight),this.Events.trigger("debug",`Freed ${u.id}`,d),E===0&&this.empty())return this.Events.trigger("idle")}catch(G){return g=G,this.Events.trigger("error",g)}}_run(s,l,u){var d,g,E;return l.doRun(),d=this._clearGlobalState.bind(this,s),E=this._run.bind(this,s,l),g=this._free.bind(this,s,l),this._scheduled[s]={timeout:setTimeout(()=>l.doExecute(this._limiter,d,E,g),u),expiration:l.options.expiration!=null?setTimeout(function(){return l.doExpire(d,E,g)},u+l.options.expiration):void 0,job:l}}_drainOne(s){return this._registerLock.schedule(()=>{var l,u,d,g,E;return this.queued()===0?this.Promise.resolve(null):(E=this._queues.getFirst(),{options:g,args:l}=d=E.first(),s!=null&&g.weight>s?this.Promise.resolve(null):(this.Events.trigger("debug",`Draining ${g.id}`,{args:l,options:g}),u=this._randomIndex(),this._store.__register__(u,g.weight,g.expiration).then(({success:G,wait:U,reservoir:D})=>{var ie;return this.Events.trigger("debug",`Drained ${g.id}`,{success:G,args:l,options:g}),G?(E.shift(),ie=this.empty(),ie&&this.Events.trigger("empty"),D===0&&this.Events.trigger("depleted",ie),this._run(u,d,U),this.Promise.resolve(g.weight)):this.Promise.resolve(null)})))})}_drainAll(s,l=0){return this._drainOne(s).then(u=>{var d;return u!=null?(d=s!=null?s-u:s,this._drainAll(d,l+u)):this.Promise.resolve(l)}).catch(u=>this.Events.trigger("error",u))}_dropAllQueued(s){return this._queues.shiftAll(function(l){return l.doDrop({message:s})})}stop(s={}){var l,u;return s=x.load(s,this.stopDefaults),u=d=>{var g;return g=()=>{var E;return E=this._states.counts,E[0]+E[1]+E[2]+E[3]===d},new this.Promise((E,G)=>g()?E():this.on("done",()=>{if(g())return this.removeAllListeners("done"),E()}))},l=s.dropWaitingJobs?(this._run=function(d,g){return g.doDrop({message:s.dropErrorMessage})},this._drainOne=()=>this.Promise.resolve(null),this._registerLock.schedule(()=>this._submitLock.schedule(()=>{var d,g,E;g=this._scheduled;for(d in g)E=g[d],this.jobStatus(E.job.options.id)==="RUNNING"&&(clearTimeout(E.timeout),clearTimeout(E.expiration),E.job.doDrop({message:s.dropErrorMessage}));return this._dropAllQueued(s.dropErrorMessage),u(0)}))):this.schedule({priority:ve-1,weight:0},()=>u(1)),this._receive=function(d){return d._reject(new T.prototype.BottleneckError(s.enqueueErrorMessage))},this.stop=()=>this.Promise.reject(new T.prototype.BottleneckError("stop() has already been called")),l}async _addToQueue(s){var l,u,d,g,E,G,U;({args:l,options:g}=s);try{({reachedHWM:E,blocked:u,strategy:U}=await this._store.__submit__(this.queued(),g.weight))}catch(D){return d=D,this.Events.trigger("debug",`Could not queue ${g.id}`,{args:l,options:g,error:d}),s.doDrop({error:d}),!1}return u?(s.doDrop(),!0):E&&(G=U===T.prototype.strategy.LEAK?this._queues.shiftLastFrom(g.priority):U===T.prototype.strategy.OVERFLOW_PRIORITY?this._queues.shiftLastFrom(g.priority+1):U===T.prototype.strategy.OVERFLOW?s:void 0,G!=null&&G.doDrop(),G==null||U===T.prototype.strategy.OVERFLOW)?(G==null&&s.doDrop(),E):(s.doQueue(E,u),this._queues.push(s),await this._drainAll(),E)}_receive(s){return this._states.jobStatus(s.options.id)!=null?(s._reject(new T.prototype.BottleneckError(`A job with the same id already exists (id=${s.options.id})`)),!1):(s.doReceive(),this._submitLock.schedule(this._addToQueue,s))}submit(...s){var l,u,d,g,E,G,U;return typeof s[0]=="function"?(E=s,[u,...s]=E,[l]=dt.call(s,-1),g=x.load({},this.jobDefaults)):(G=s,[g,u,...s]=G,[l]=dt.call(s,-1),g=x.load(g,this.jobDefaults)),U=(...D)=>new this.Promise(function(ie,wr){return u(...D,function(...ht){return(ht[0]!=null?wr:ie)(ht)})}),d=new we(U,s,g,this.jobDefaults,this.rejectOnDrop,this.Events,this._states,this.Promise),d.promise.then(function(D){return typeof l=="function"?l(...D):void 0}).catch(function(D){return Array.isArray(D)?typeof l=="function"?l(...D):void 0:typeof l=="function"?l(D):void 0}),this._receive(d)}schedule(...s){var l,u,d;return typeof s[0]=="function"?([d,...s]=s,u={}):[u,d,...s]=s,l=new we(d,s,u,this.jobDefaults,this.rejectOnDrop,this.Events,this._states,this.Promise),this._receive(l),l.promise}wrap(s){var l,u;return l=this.schedule.bind(this),u=function(...d){return l(s.bind(this),...d)},u.withOptions=function(d,...g){return l(d,s,...g)},u}async updateSettings(s={}){return await this._store.__updateSettings__(x.overwrite(s,this.storeDefaults)),x.overwrite(s,this.instanceDefaults,this),this}currentReservoir(){return this._store.__currentReservoir__()}incrementReservoir(s=0){return this._store.__incrementReservoir__(s)}}return T.default=T,T.Events=be,T.version=T.prototype.version=Tr.version,T.strategy=T.prototype.strategy={LEAK:1,OVERFLOW:2,OVERFLOW_PRIORITY:4,BLOCK:3},T.BottleneckError=T.prototype.BottleneckError=h,T.Group=T.prototype.Group=fr,T.RedisConnection=T.prototype.RedisConnection=Je,T.IORedisConnection=T.prototype.IORedisConnection=Ye,T.Batcher=T.prototype.Batcher=_r,T.prototype.jobDefaults={priority:at,weight:1,expiration:null,id:"<no-id>"},T.prototype.storeDefaults={maxConcurrent:null,minTime:0,highWater:null,strategy:T.prototype.strategy.LEAK,penalty:null,reservoir:null,reservoirRefreshInterval:null,reservoirRefreshAmount:null,reservoirIncreaseInterval:null,reservoirIncreaseAmount:null,reservoirIncreaseMaximum:null},T.prototype.localStoreDefaults={Promise,timeout:null,heartbeatInterval:250},T.prototype.redisStoreDefaults={Promise,timeout:null,heartbeatInterval:5e3,clientTimeout:1e4,Redis:null,clientOptions:{},clusterNodes:null,clearDatastore:!1,connection:null},T.prototype.instanceDefaults={datastore:"local",connection:null,id:"<no-id>",rejectOnDrop:!0,trackDoneStatus:!1,Promise},T.prototype.stopDefaults={enqueueErrorMessage:"This limiter has been stopped and cannot accept new jobs.",dropWaitingJobs:!0,dropErrorMessage:"This limiter has been stopped."},T}).call(r);var gt=it,br=gt;return br})})(nr);var Bs=nr.exports;const ir=xs(Bs);var Hs="0.0.0-development";async function ar(e,t,r,o){if(!r.request||!r.request.request)throw r;if(r.status>=400&&!e.doNotRetry.includes(r.status)){const n=o.request.retries!=null?o.request.retries:e.retries,i=Math.pow((o.request.retryCount||0)+1,2);throw t.retry.retryRequest(r,n,i)}throw r}async function Ns(e,t,r,o){const n=new ir;return n.on("failed",function(i,a){const p=~~i.request.request.retries,m=~~i.request.request.retryAfter;if(o.request.retryCount=a.retryCount+1,p>a.retryCount)return m*e.retryAfterBaseValue}),n.schedule(Vs.bind(null,e,t,r),o)}async function Vs(e,t,r,o){const n=await r(r,o);if(n.data&&n.data.errors&&n.data.errors.length>0&&/Something went wrong while executing your query/.test(n.data.errors[0].message)){const i=new ce(n.data.errors[0].message,500,{request:o,response:n});return ar(e,t,i,o)}return n}function cr(e,t){const r=Object.assign({enabled:!0,retryAfterBaseValue:1e3,doNotRetry:[400,401,403,404,422,451],retries:3},t.retry);return r.enabled&&(e.hook.error("request",ar.bind(null,r,e)),e.hook.wrap("request",Ns.bind(null,r,e))),{retry:{retryRequest:(o,n,i)=>(o.request.request=Object.assign({},o.request.request,{retries:n,retryAfter:i}),o)}}}cr.VERSION=Hs;var Ms="0.0.0-development",Re=()=>Promise.resolve();function zs(e,t,r){return e.retryLimiter.schedule(Ks,e,t,r)}async function Ks(e,t,r){const o=r.method!=="GET"&&r.method!=="HEAD",{pathname:n}=new URL(r.url,"http://github.test"),i=r.method==="GET"&&n.startsWith("/search/"),a=n.startsWith("/graphql"),m=~~t.retryCount>0?{priority:0,weight:0}:{};e.clustering&&(m.expiration=1e3*60),(o||a)&&await e.write.key(e.id).schedule(m,Re),o&&e.triggersNotification(n)&&await e.notifications.key(e.id).schedule(m,Re),i&&await e.search.key(e.id).schedule(m,Re);const f=e.global.key(e.id).schedule(m,t,r);if(a){const b=await f;if(b.data.errors!=null&&b.data.errors.some(w=>w.type==="RATE_LIMITED"))throw Object.assign(new Error("GraphQL Rate Limit Exceeded"),{response:b,data:b.data})}return f}var Qs=["/orgs/{org}/invitations","/orgs/{org}/invitations/{invitation_id}","/orgs/{org}/teams/{team_slug}/discussions","/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments","/repos/{owner}/{repo}/collaborators/{username}","/repos/{owner}/{repo}/commits/{commit_sha}/comments","/repos/{owner}/{repo}/issues","/repos/{owner}/{repo}/issues/{issue_number}/comments","/repos/{owner}/{repo}/pulls","/repos/{owner}/{repo}/pulls/{pull_number}/comments","/repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies","/repos/{owner}/{repo}/pulls/{pull_number}/merge","/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers","/repos/{owner}/{repo}/pulls/{pull_number}/reviews","/repos/{owner}/{repo}/releases","/teams/{team_id}/discussions","/teams/{team_id}/discussions/{discussion_number}/comments"];function Js(e){const r=`^(?:${e.map(o=>o.split("/").map(n=>n.startsWith("{")?"(?:.+?)":n).join("/")).map(o=>`(?:${o})`).join("|")})[^/]*$`;return new RegExp(r,"i")}var Gt=Js(Qs),lr=Gt.test.bind(Gt),se={},Ys=function(e,t){se.global=new e.Group({id:"octokit-global",maxConcurrent:10,...t}),se.search=new e.Group({id:"octokit-search",maxConcurrent:1,minTime:2e3,...t}),se.write=new e.Group({id:"octokit-write",maxConcurrent:1,minTime:1e3,...t}),se.notifications=new e.Group({id:"octokit-notifications",maxConcurrent:1,minTime:3e3,...t})};function Ne(e,t){const{enabled:r=!0,Bottleneck:o=ir,id:n="no-id",timeout:i=1e3*60*2,connection:a}=t.throttle||{};if(!r)return{};const p={timeout:i};typeof a<"u"&&(p.connection=a),se.global==null&&Ys(o,p);const m=Object.assign({clustering:a!=null,triggersNotification:lr,fallbackSecondaryRateRetryAfter:60,retryAfterBaseValue:1e3,retryLimiter:new o,id:n,...se},t.throttle);if(typeof m.onSecondaryRateLimit!="function"||typeof m.onRateLimit!="function")throw new Error(`octokit/plugin-throttling error:
        You must pass the onSecondaryRateLimit and onRateLimit error handlers.
        See https://octokit.github.io/rest.js/#throttling

        const octokit = new Octokit({
          throttle: {
            onSecondaryRateLimit: (retryAfter, options) => {/* ... */},
            onRateLimit: (retryAfter, options) => {/* ... */}
          }
        })
    `);const f={},b=new o.Events(f);return f.on("secondary-limit",m.onSecondaryRateLimit),f.on("rate-limit",m.onRateLimit),f.on("error",w=>e.log.warn("Error in throttling-plugin limit handler",w)),m.retryLimiter.on("failed",async function(w,y){const[P,R,k]=y.args,{pathname:h}=new URL(k.url,"http://github.test");if(!(h.startsWith("/graphql")&&w.status!==401||w.status===403||w.status===429))return;const v=~~R.retryCount;R.retryCount=v,k.request.retryCount=v;const{wantRetry:S,retryAfter:O=0}=await async function(){var A;if(/\bsecondary rate\b/i.test(w.message)){const $=Number(w.response.headers["retry-after"])||P.fallbackSecondaryRateRetryAfter;return{wantRetry:await b.trigger("secondary-limit",$,k,e,v),retryAfter:$}}if(w.response.headers!=null&&w.response.headers["x-ratelimit-remaining"]==="0"||(((A=w.response.data)==null?void 0:A.errors)??[]).some($=>$.type==="RATE_LIMITED")){const $=new Date(~~w.response.headers["x-ratelimit-reset"]*1e3).getTime(),Y=Math.max(Math.ceil(($-Date.now())/1e3)+1,0);return{wantRetry:await b.trigger("rate-limit",Y,k,e,v),retryAfter:Y}}return{}}();if(S)return R.retryCount++,O*P.retryAfterBaseValue}),e.hook.wrap("request",zs.bind(null,m)),{}}Ne.VERSION=Ms;Ne.triggersNotification=lr;var Xs="0.0.0-development",Ot=vs.plugin(or,Zt,Ds,cr,Ne).defaults({userAgent:`octokit.js/${Xs}`,throttle:{onRateLimit:Zs,onSecondaryRateLimit:eo}});function Zs(e,t,r){if(r.log.warn(`Request quota exhausted for request ${t.method} ${t.url}`),t.request.retryCount===0)return r.log.info(`Retrying after ${e} seconds!`),!0}function eo(e,t,r){if(r.log.warn(`SecondaryRateLimit detected for request ${t.method} ${t.url}`),t.request.retryCount===0)return r.log.info(`Retrying after ${e} seconds!`),!0}const Rt=[{name:"Awakening",nameSlug:"awakening",darkColor:"#3f5471",lightColor:"#c7d5c6",characters:[]},{name:"Binding Blade",nameSlug:"binding_blade",darkColor:"#49607c",lightColor:"#e7e2ce",characters:[]},{name:"Blazing Sword",nameSlug:"blazing_sword",darkColor:"#5e9a3a",lightColor:"#fef76f",characters:[]},{name:"Echoes",nameSlug:"echoes",darkColor:"#3a9073",lightColor:"#b9f3c8",characters:[]},{name:"Engage",nameSlug:"engage",darkColor:"#fe8aff",lightColor:"#5937c7",characters:[{name:"Female Alear",nameSlug:"female_alear",heightInCm:165,outfits:[{outfitWeightThresholdInLb:600,mainShape:"💎",secondaryShape:"🍎"},{outfitWeightThresholdInLb:800,mainShape:"💎",outfit:"Awoken Divinity",outfitSlug:"awoken_divinity"}]},{name:"Lumera",nameSlug:"lumera",heightInCm:177,outfits:[{outfitWeightThresholdInLb:800,mainShape:"💎",secondaryShape:"⌛"},{outfitWeightThresholdInLb:900,mainShape:"⌛",outfit:"Distant Skies",outfitSlug:"distant_skies",secondaryShape:"⌛"},{outfitWeightThresholdInLb:1e3,mainShape:"💎",outfit:"Fallen",outfitSlug:"fallen",secondaryShape:"💎"}]},{name:"Chloe",nameSlug:"chloe",heightInCm:167,outfits:[{outfitWeightThresholdInLb:600,mainShape:"⌛",secondaryShape:"🔵"},{outfitWeightThresholdInLb:700,mainShape:"⌛",outfit:"Spring",outfitSlug:"spring"}]},{name:"Lapis",nameSlug:"lapis",heightInCm:160,outfits:[{outfitWeightThresholdInLb:500,mainShape:"🔵"},{outfitWeightThresholdInLb:800,mainShape:"⌛",outfit:"Bride",outfitSlug:"bride",secondaryShape:"🔵"}]},{name:"Citrinne",nameSlug:"citrinne",heightInCm:163,outfits:[{outfitWeightThresholdInLb:700,mainShape:"🍐"}]},{name:"Ivy",nameSlug:"ivy",heightInCm:172,outfits:[{outfitWeightThresholdInLb:700,mainShape:"⌛"},{outfitWeightThresholdInLb:700,mainShape:"⌛",outfit:"Summer",outfitSlug:"summer",secondaryShape:"⌛"}]},{name:"Timerra",nameSlug:"timerra",heightInCm:159,outfits:[{outfitWeightThresholdInLb:600,mainShape:"🍎"},{outfitWeightThresholdInLb:800,mainShape:"🍎",outfit:"Harvest",outfitSlug:"harvest",secondaryShape:"🍎"}]},{name:"Merrin",nameSlug:"merrin",heightInCm:173,outfits:[{outfitWeightThresholdInLb:500,mainShape:"🍎"}]},{name:"Panette",nameSlug:"panette",heightInCm:164,outfits:[{outfitWeightThresholdInLb:700,mainShape:"🍐"}]},{name:"Zephia",nameSlug:"zephia",heightInCm:177,outfits:[{outfitWeightThresholdInLb:800,mainShape:"⌛",secondaryShape:"🍐"}]},{name:"Nel",nameSlug:"nel",heightInCm:175,outfits:[{outfitWeightThresholdInLb:700,mainShape:"🔵",outfit:"Bride",outfitSlug:"bride",secondaryShape:"🔵"}]},{name:"Goldmary",nameSlug:"goldmary",heightInCm:173,outfits:[{outfitWeightThresholdInLb:800,mainShape:"💎",outfit:"Summer",outfitSlug:"summer",secondaryShape:"💎"}]},{name:"Etie",nameSlug:"etie",heightInCm:154,outfits:[{outfitWeightThresholdInLb:400,mainShape:"🍎"}]},{name:"Yunaka",nameSlug:"yunaka",heightInCm:164,outfits:[{outfitWeightThresholdInLb:600,mainShape:"🍐",outfit:"Christmas",outfitSlug:"christmas",secondaryShape:"🍎"}]},{name:"Celine",nameSlug:"celine",heightInCm:155,outfits:[{outfitWeightThresholdInLb:700,mainShape:"🍐"}]}]},{name:"Fates",nameSlug:"fates",darkColor:"#895ea9",lightColor:"#ffe2eb",characters:[]},{name:"Heroes",nameSlug:"heroes",darkColor:"#1e7fc7",lightColor:"#5deeff",characters:[]},{name:"Holy War",nameSlug:"holy_war",darkColor:"#9f7530",lightColor:"#ffea5b",characters:[]},{name:"Mirage",nameSlug:"mirage",darkColor:"#181827",lightColor:"#4c3c4b",characters:[]},{name:"Radiant",nameSlug:"radiant",darkColor:"#2e4cc7",lightColor:"#91bfff",characters:[]},{name:"Sacred Stones",nameSlug:"sacred_stones",darkColor:"#2daca6",lightColor:"#8dfde9",characters:[]},{name:"Shadow Dragon",nameSlug:"shadow_dragon",darkColor:"#4d497a",lightColor:"#f3b8cc",characters:[]},{name:"Thracia",nameSlug:"thracia",darkColor:"#7e2235",lightColor:"#fe5664",characters:[]},{name:"Three Houses",nameSlug:"threehouses",darkColor:"#9f9b91",lightColor:"#fff7db",characters:[{name:"Edelgard",nameSlug:"edelgard",heightInCm:165,outfits:[{outfitWeightThresholdInLb:600,mainShape:"💎",secondaryShape:"🍎"},{outfitWeightThresholdInLb:400,mainShape:"💎",outfit:"Empress",outfitSlug:"empress"},{outfitWeightThresholdInLb:700,mainShape:"💎",outfit:"Christmas",outfitSlug:"christmas",secondaryShape:"⌛"},{outfitWeightThresholdInLb:900,mainShape:"⌛",outfit:"Flame Emperor",outfitSlug:"flame_emperor",secondaryShape:"⌛"},{outfitWeightThresholdInLb:900,mainShape:"💎",outfit:"Summer",outfitSlug:"summer",secondaryShape:"💎"},{outfitWeightThresholdInLb:1e3,mainShape:"⌛",outfit:"Fallen",outfitSlug:"fallen",secondaryShape:"🔵"}]},{name:"Dorothea",nameSlug:"dorothea",heightInCm:167,outfits:[{outfitWeightThresholdInLb:600,mainShape:"⌛"},{outfitWeightThresholdInLb:400,mainShape:"🔵",outfit:"Christmas",outfitSlug:"christmas"},{outfitWeightThresholdInLb:600,mainShape:"⌛",outfit:"Plegian Harmonic",outfitSlug:"plegian_harmonic",secondaryShape:"🔵"},{outfitWeightThresholdInLb:900,mainShape:"🍐",outfit:"Summer",outfitSlug:"summer"}]},{name:"Marianne",nameSlug:"marianne",heightInCm:172,outfits:[{outfitWeightThresholdInLb:1e3,mainShape:"⌛",outfit:"Cursed Blessing",outfitSlug:"cursed_blessing"},{outfitWeightThresholdInLb:700,mainShape:"⌛",outfit:"Summer",outfitSlug:"summer",secondaryShape:"⌛"}]},{name:"Mercedes",nameSlug:"mercedes",heightInCm:159,outfits:[{outfitWeightThresholdInLb:1e3,mainShape:"🍎",outfit:"Together in Tea",outfitSlug:"together_in_tea"}]},{name:"Leonie",nameSlug:"leonie",heightInCm:159,outfits:[{outfitWeightThresholdInLb:800,mainShape:"🍎",outfit:"Summer",outfitSlug:"summer",secondaryShape:"🍎"}]},{name:"Bernadetta",nameSlug:"bernadetta",heightInCm:173,outfits:[{outfitWeightThresholdInLb:800,mainShape:"🍎",outfit:"Summer",outfitSlug:"summer"}]},{name:"Petra",nameSlug:"petra",heightInCm:164,outfits:[{outfitWeightThresholdInLb:900,mainShape:"🍐",outfit:"Faraway Sun",outfitSlug:"faraway_sun"}]}]}];function At(e,t,r){const o=e.slice();return o[13]=t[r],o}function Ft(e,t,r){const o=e.slice();return o[16]=t[r],o}function Ct(e){let t,r=e[16]+"",o,n;return{c(){t=L("option"),o=M(r),n=H(),le(t,"color",e[3][e[16]].color),le(t,"font-weight","600"),t.__value=e[16],N(t,t.__value)},m(i,a){j(i,t,a),C(t,o),C(t,n)},p:q,d(i){i&&I(t)}}}function Ut(e){let t,r=e[13]+"",o,n,i;return{c(){t=L("option"),o=M(r),n=H(),t.__value=i=e[13],N(t,t.__value)},m(a,p){j(a,t,p),C(t,o),C(t,n)},p(a,p){p&1&&r!==(r=a[13]+"")&&Wt(o,r),p&17&&i!==(i=a[13])&&(t.__value=i,N(t,t.__value))},d(a){a&&I(t)}}}function to(e){let t,r,o,n,i,a,p,m,f,b,w,y=te(e[4]),P=[];for(let h=0;h<y.length;h+=1)P[h]=Ct(Ft(e,y,h));let R=te(e[3][e[0].target].outfits),k=[];for(let h=0;h<R.length;h+=1)k[h]=Ut(At(e,R,h));return{c(){t=L("form"),r=L("select");for(let h=0;h<P.length;h+=1)P[h].c();o=H(),n=L("select");for(let h=0;h<k.length;h+=1)k[h].c();i=L("option"),i.textContent="broken",a=H(),p=L("input"),m=H(),f=L("input"),le(r,"color",e[3][e[0].target].color),le(r,"font-weight","600"),e[0].target===void 0&&de(()=>e[5].call(r)),i.__value="broken",N(i,i.__value),e[0].targetOutfit===void 0&&de(()=>e[6].call(n)),z(p,"type","number"),z(p,"min","1"),z(f,"type","button"),f.value="X",z(f,"class","delete svelte-963viu"),z(t,"class","svelte-963viu")},m(h,_){j(h,t,_),C(t,r);for(let v=0;v<P.length;v+=1)P[v]&&P[v].m(r,null);he(r,e[0].target,!0),C(t,o),C(t,n);for(let v=0;v<k.length;v+=1)k[v]&&k[v].m(n,null);C(n,i),he(n,e[0].targetOutfit,!0),C(t,a),C(t,p),N(p,e[0].amount),C(t,m),C(t,f),b||(w=[W(r,"change",e[5]),W(r,"change",e[2]),W(n,"change",e[6]),W(n,"change",e[2]),W(p,"input",e[7]),W(p,"change",e[2]),W(f,"click",e[1])],b=!0)},p(h,[_]){if(_&24){y=te(h[4]);let v;for(v=0;v<y.length;v+=1){const S=Ft(h,y,v);P[v]?P[v].p(S,_):(P[v]=Ct(S),P[v].c(),P[v].m(r,null))}for(;v<P.length;v+=1)P[v].d(1);P.length=y.length}if(_&1&&le(r,"color",h[3][h[0].target].color),_&17&&he(r,h[0].target),_&9){R=te(h[3][h[0].target].outfits);let v;for(v=0;v<R.length;v+=1){const S=At(h,R,v);k[v]?k[v].p(S,_):(k[v]=Ut(S),k[v].c(),k[v].m(n,i))}for(;v<k.length;v+=1)k[v].d(1);k.length=R.length}_&17&&he(n,h[0].targetOutfit),_&17&&$t(p.value)!==h[0].amount&&N(p,h[0].amount)},i:q,o:q,d(h){h&&I(t),Ae(P,h),Ae(k,h),b=!1,J(w)}}}function ro(e,t,r){function o(h){return Rt.flatMap(_=>_.characters).filter(_=>_.nameSlug===h).at(0)||null}function n(h,_){var v;return _==="broken"||(((v=o(h))==null?void 0:v.outfits)||[]).map(S=>S.outfitSlug).includes(_)}function i(h){var _;return(((_=o(h))==null?void 0:_.outfits)||[]).map(v=>v.outfitSlug)[0]||"base"}const a=Or();function p(){a("delete")}function m(){n(y.target,y.targetOutfit)||r(0,y.targetOutfit=i(y.target),y),a("change")}const f=Rt.flatMap(h=>h.characters.map(_=>[_.nameSlug,{color:h.darkColor,outfits:_.outfits.map(v=>v.outfitSlug||"base")}])),b=Object.fromEntries(f),w=Object.keys(b).sort();let{donation:y}=t;function P(){y.target=ft(this),r(0,y),r(4,w)}function R(){y.targetOutfit=ft(this),r(0,y),r(4,w)}function k(){y.amount=$t(this.value),r(0,y),r(4,w)}return e.$$set=h=>{"donation"in h&&r(0,y=h.donation)},[y,p,m,b,w,P,R,k]}class so extends We{constructor(t){super(),$e(this,t,ro,to,Le,{donation:0})}}function Dt(e,t,r){const o=e.slice();return o[12]=t[r],o[14]=r,o}function Lt(e){let t,r;function o(){return e[7](e[14])}return t=new so({props:{donation:e[12]}}),t.$on("delete",o),t.$on("change",e[8]),{c(){Nt(t.$$.fragment)},m(n,i){je(t,n,i),r=!0},p(n,i){e=n;const a={};i&1&&(a.donation=e[12]),t.$set(a)},i(n){r||(V(t.$$.fragment,n),r=!0)},o(n){ne(t.$$.fragment,n),r=!1},d(n){qe(t,n)}}}function oo(e){let t,r,o,n,i=e[2]?"Save":"No changes to save",a,p,m,f,b,w,y,P,R,k,h=te(e[0]),_=[];for(let S=0;S<h.length;S+=1)_[S]=Lt(Dt(e,h,S));const v=S=>ne(_[S],1,1,()=>{_[S]=null});return{c(){for(let S=0;S<_.length;S+=1)_[S].c();t=H(),r=L("button"),r.textContent="Add a donation",o=H(),n=L("button"),a=M(i),m=H(),f=L("form"),b=L("label"),w=M(`Token
    `),y=L("input"),n.disabled=p=!e[2],z(y,"type","password")},m(S,O){for(let A=0;A<_.length;A+=1)_[A]&&_[A].m(S,O);j(S,t,O),j(S,r,O),j(S,o,O),j(S,n,O),C(n,a),j(S,m,O),j(S,f,O),C(f,b),C(b,w),C(b,y),N(y,e[1]),P=!0,R||(k=[W(r,"click",e[5]),W(n,"click",e[6]),W(y,"input",e[9]),W(y,"change",e[10])],R=!0)},p(S,[O]){if(O&21){h=te(S[0]);let A;for(A=0;A<h.length;A+=1){const $=Dt(S,h,A);_[A]?(_[A].p($,O),V(_[A],1)):(_[A]=Lt($),_[A].c(),V(_[A],1),_[A].m(t.parentNode,t))}for(Bt(),A=h.length;A<_.length;A+=1)v(A);Ht()}(!P||O&4)&&i!==(i=S[2]?"Save":"No changes to save")&&Wt(a,i),(!P||O&4&&p!==(p=!S[2]))&&(n.disabled=p),O&2&&y.value!==S[1]&&N(y,S[1])},i(S){if(!P){for(let O=0;O<h.length;O+=1)V(_[O]);P=!0}},o(S){_=_.filter(Boolean);for(let O=0;O<_.length;O+=1)ne(_[O]);P=!1},d(S){S&&(I(t),I(r),I(o),I(n),I(m),I(f)),Ae(_,S),R=!1,J(k)}}}const It="8c4b31c95b425cb40d3f865d95561bfa";function no(e,t,r){let o,n=(()=>{const k=localStorage.getItem("fehwgc-admin")||"";return k&&(o=new Ot({auth:k})),k})();function i(){localStorage.setItem("fehwgc-admin",n),o=new Ot({auth:n})}let{donations:a}=t,p=!1;function m(k){a.splice(k,1),r(0,a),r(2,p=!0)}function f(){r(2,p=!0),a.push({target:"edelgard",targetOutfit:"base",amount:0}),r(0,a)}const b=async()=>{await o.request(`PATCH /gists/${It}`,{gist_id:It,files:{"donos.csv":{content:a.map(k=>`${k.target},${k.targetOutfit},${k.amount}`).join(`
`)}}}),r(2,p=!1)},w=k=>m(k),y=()=>{r(2,p=!0)};function P(){n=this.value,r(1,n)}const R=()=>i();return e.$$set=k=>{"donations"in k&&r(0,a=k.donations)},[a,n,p,i,m,f,b,w,y,P,R]}class io extends We{constructor(t){super(),$e(this,t,no,oo,Le,{donations:0})}}function ao(e){let t,r=e[1]+"",o;return{c(){t=M("Error: "),o=M(r)},m(n,i){j(n,t,i),j(n,o,i)},p:q,i:q,o:q,d(n){n&&(I(t),I(o))}}}function co(e){let t,r;return t=new io({props:{donations:e[0]}}),{c(){Nt(t.$$.fragment)},m(o,n){je(t,o,n),r=!0},p:q,i(o){r||(V(t.$$.fragment,o),r=!0)},o(o){ne(t.$$.fragment,o),r=!1},d(o){qe(t,o)}}}function lo(e){let t;return{c(){t=M("Loading data...")},m(r,o){j(r,t,o)},p:q,i:q,o:q,d(r){r&&I(t)}}}function uo(e){let t,r,o,n,i={ctx:e,current:null,token:null,hasCatch:!0,pending:lo,then:co,catch:ao,value:0,error:1,blocks:[,,,]};return Ur(po(),i),{c(){t=L("main"),r=L("h1"),r.textContent="Weight gain chart admin",o=H(),i.block.c(),z(t,"class","container svelte-wfmixh")},m(a,p){j(a,t,p),C(t,r),C(t,o),i.block.m(t,i.anchor=null),i.mount=()=>t,i.anchor=null,n=!0},p(a,[p]){e=a,Dr(i,e,p)},i(a){n||(V(i.block),n=!0)},o(a){for(let p=0;p<3;p+=1){const m=i.blocks[p];ne(m)}n=!1},d(a){a&&I(t),i.block.d(),i.token=null,i=null}}}async function po(){const e=await fetch("https://api.github.com/gists/8c4b31c95b425cb40d3f865d95561bfa",{headers:{Accept:"application/vnd.github+json"}});return(JSON.parse(await e.text()).files["donos.csv"]||{content:""}).content.split(`
`).map(r=>r.split(",")).map(r=>({target:r[0],targetOutfit:r[1],amount:parseInt(r[2])})).filter(r=>!!r.target)}class go extends We{constructor(t){super(),$e(this,t,null,uo,Le,{})}}new go({target:document.getElementById("app")});
